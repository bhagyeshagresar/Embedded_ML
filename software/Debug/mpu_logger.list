
mpu_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000461c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080047b8  080047b8  000147b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004840  08004840  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08004840  08004840  00014840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004848  08004848  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004848  08004848  00014848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800484c  0800484c  0001484c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08004850  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000100  08004950  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  08004950  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af53  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000173b  00000000  00000000  0002b083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  0002c7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000898  00000000  00000000  0002d0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015a6a  00000000  00000000  0002d960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd80  00000000  00000000  000433ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086c57  00000000  00000000  0004f14a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d5da1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000289c  00000000  00000000  000d5df4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000100 	.word	0x20000100
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800479c 	.word	0x0800479c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000104 	.word	0x20000104
 80001d4:	0800479c 	.word	0x0800479c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_uldivmod>:
 8000ab0:	b953      	cbnz	r3, 8000ac8 <__aeabi_uldivmod+0x18>
 8000ab2:	b94a      	cbnz	r2, 8000ac8 <__aeabi_uldivmod+0x18>
 8000ab4:	2900      	cmp	r1, #0
 8000ab6:	bf08      	it	eq
 8000ab8:	2800      	cmpeq	r0, #0
 8000aba:	bf1c      	itt	ne
 8000abc:	f04f 31ff 	movne.w	r1, #4294967295
 8000ac0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac4:	f000 b974 	b.w	8000db0 <__aeabi_idiv0>
 8000ac8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000acc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad0:	f000 f806 	bl	8000ae0 <__udivmoddi4>
 8000ad4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000adc:	b004      	add	sp, #16
 8000ade:	4770      	bx	lr

08000ae0 <__udivmoddi4>:
 8000ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae4:	9d08      	ldr	r5, [sp, #32]
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	468e      	mov	lr, r1
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d14d      	bne.n	8000b8a <__udivmoddi4+0xaa>
 8000aee:	428a      	cmp	r2, r1
 8000af0:	4694      	mov	ip, r2
 8000af2:	d969      	bls.n	8000bc8 <__udivmoddi4+0xe8>
 8000af4:	fab2 f282 	clz	r2, r2
 8000af8:	b152      	cbz	r2, 8000b10 <__udivmoddi4+0x30>
 8000afa:	fa01 f302 	lsl.w	r3, r1, r2
 8000afe:	f1c2 0120 	rsb	r1, r2, #32
 8000b02:	fa20 f101 	lsr.w	r1, r0, r1
 8000b06:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b0a:	ea41 0e03 	orr.w	lr, r1, r3
 8000b0e:	4094      	lsls	r4, r2
 8000b10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b14:	0c21      	lsrs	r1, r4, #16
 8000b16:	fbbe f6f8 	udiv	r6, lr, r8
 8000b1a:	fa1f f78c 	uxth.w	r7, ip
 8000b1e:	fb08 e316 	mls	r3, r8, r6, lr
 8000b22:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b26:	fb06 f107 	mul.w	r1, r6, r7
 8000b2a:	4299      	cmp	r1, r3
 8000b2c:	d90a      	bls.n	8000b44 <__udivmoddi4+0x64>
 8000b2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b32:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b36:	f080 811f 	bcs.w	8000d78 <__udivmoddi4+0x298>
 8000b3a:	4299      	cmp	r1, r3
 8000b3c:	f240 811c 	bls.w	8000d78 <__udivmoddi4+0x298>
 8000b40:	3e02      	subs	r6, #2
 8000b42:	4463      	add	r3, ip
 8000b44:	1a5b      	subs	r3, r3, r1
 8000b46:	b2a4      	uxth	r4, r4
 8000b48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b54:	fb00 f707 	mul.w	r7, r0, r7
 8000b58:	42a7      	cmp	r7, r4
 8000b5a:	d90a      	bls.n	8000b72 <__udivmoddi4+0x92>
 8000b5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b60:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b64:	f080 810a 	bcs.w	8000d7c <__udivmoddi4+0x29c>
 8000b68:	42a7      	cmp	r7, r4
 8000b6a:	f240 8107 	bls.w	8000d7c <__udivmoddi4+0x29c>
 8000b6e:	4464      	add	r4, ip
 8000b70:	3802      	subs	r0, #2
 8000b72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b76:	1be4      	subs	r4, r4, r7
 8000b78:	2600      	movs	r6, #0
 8000b7a:	b11d      	cbz	r5, 8000b84 <__udivmoddi4+0xa4>
 8000b7c:	40d4      	lsrs	r4, r2
 8000b7e:	2300      	movs	r3, #0
 8000b80:	e9c5 4300 	strd	r4, r3, [r5]
 8000b84:	4631      	mov	r1, r6
 8000b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8a:	428b      	cmp	r3, r1
 8000b8c:	d909      	bls.n	8000ba2 <__udivmoddi4+0xc2>
 8000b8e:	2d00      	cmp	r5, #0
 8000b90:	f000 80ef 	beq.w	8000d72 <__udivmoddi4+0x292>
 8000b94:	2600      	movs	r6, #0
 8000b96:	e9c5 0100 	strd	r0, r1, [r5]
 8000b9a:	4630      	mov	r0, r6
 8000b9c:	4631      	mov	r1, r6
 8000b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba2:	fab3 f683 	clz	r6, r3
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	d14a      	bne.n	8000c40 <__udivmoddi4+0x160>
 8000baa:	428b      	cmp	r3, r1
 8000bac:	d302      	bcc.n	8000bb4 <__udivmoddi4+0xd4>
 8000bae:	4282      	cmp	r2, r0
 8000bb0:	f200 80f9 	bhi.w	8000da6 <__udivmoddi4+0x2c6>
 8000bb4:	1a84      	subs	r4, r0, r2
 8000bb6:	eb61 0303 	sbc.w	r3, r1, r3
 8000bba:	2001      	movs	r0, #1
 8000bbc:	469e      	mov	lr, r3
 8000bbe:	2d00      	cmp	r5, #0
 8000bc0:	d0e0      	beq.n	8000b84 <__udivmoddi4+0xa4>
 8000bc2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bc6:	e7dd      	b.n	8000b84 <__udivmoddi4+0xa4>
 8000bc8:	b902      	cbnz	r2, 8000bcc <__udivmoddi4+0xec>
 8000bca:	deff      	udf	#255	; 0xff
 8000bcc:	fab2 f282 	clz	r2, r2
 8000bd0:	2a00      	cmp	r2, #0
 8000bd2:	f040 8092 	bne.w	8000cfa <__udivmoddi4+0x21a>
 8000bd6:	eba1 010c 	sub.w	r1, r1, ip
 8000bda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bde:	fa1f fe8c 	uxth.w	lr, ip
 8000be2:	2601      	movs	r6, #1
 8000be4:	0c20      	lsrs	r0, r4, #16
 8000be6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bea:	fb07 1113 	mls	r1, r7, r3, r1
 8000bee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bf2:	fb0e f003 	mul.w	r0, lr, r3
 8000bf6:	4288      	cmp	r0, r1
 8000bf8:	d908      	bls.n	8000c0c <__udivmoddi4+0x12c>
 8000bfa:	eb1c 0101 	adds.w	r1, ip, r1
 8000bfe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c02:	d202      	bcs.n	8000c0a <__udivmoddi4+0x12a>
 8000c04:	4288      	cmp	r0, r1
 8000c06:	f200 80cb 	bhi.w	8000da0 <__udivmoddi4+0x2c0>
 8000c0a:	4643      	mov	r3, r8
 8000c0c:	1a09      	subs	r1, r1, r0
 8000c0e:	b2a4      	uxth	r4, r4
 8000c10:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c14:	fb07 1110 	mls	r1, r7, r0, r1
 8000c18:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000c20:	45a6      	cmp	lr, r4
 8000c22:	d908      	bls.n	8000c36 <__udivmoddi4+0x156>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c2c:	d202      	bcs.n	8000c34 <__udivmoddi4+0x154>
 8000c2e:	45a6      	cmp	lr, r4
 8000c30:	f200 80bb 	bhi.w	8000daa <__udivmoddi4+0x2ca>
 8000c34:	4608      	mov	r0, r1
 8000c36:	eba4 040e 	sub.w	r4, r4, lr
 8000c3a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c3e:	e79c      	b.n	8000b7a <__udivmoddi4+0x9a>
 8000c40:	f1c6 0720 	rsb	r7, r6, #32
 8000c44:	40b3      	lsls	r3, r6
 8000c46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c4e:	fa20 f407 	lsr.w	r4, r0, r7
 8000c52:	fa01 f306 	lsl.w	r3, r1, r6
 8000c56:	431c      	orrs	r4, r3
 8000c58:	40f9      	lsrs	r1, r7
 8000c5a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c5e:	fa00 f306 	lsl.w	r3, r0, r6
 8000c62:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c66:	0c20      	lsrs	r0, r4, #16
 8000c68:	fa1f fe8c 	uxth.w	lr, ip
 8000c6c:	fb09 1118 	mls	r1, r9, r8, r1
 8000c70:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c74:	fb08 f00e 	mul.w	r0, r8, lr
 8000c78:	4288      	cmp	r0, r1
 8000c7a:	fa02 f206 	lsl.w	r2, r2, r6
 8000c7e:	d90b      	bls.n	8000c98 <__udivmoddi4+0x1b8>
 8000c80:	eb1c 0101 	adds.w	r1, ip, r1
 8000c84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c88:	f080 8088 	bcs.w	8000d9c <__udivmoddi4+0x2bc>
 8000c8c:	4288      	cmp	r0, r1
 8000c8e:	f240 8085 	bls.w	8000d9c <__udivmoddi4+0x2bc>
 8000c92:	f1a8 0802 	sub.w	r8, r8, #2
 8000c96:	4461      	add	r1, ip
 8000c98:	1a09      	subs	r1, r1, r0
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ca0:	fb09 1110 	mls	r1, r9, r0, r1
 8000ca4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ca8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cac:	458e      	cmp	lr, r1
 8000cae:	d908      	bls.n	8000cc2 <__udivmoddi4+0x1e2>
 8000cb0:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cb8:	d26c      	bcs.n	8000d94 <__udivmoddi4+0x2b4>
 8000cba:	458e      	cmp	lr, r1
 8000cbc:	d96a      	bls.n	8000d94 <__udivmoddi4+0x2b4>
 8000cbe:	3802      	subs	r0, #2
 8000cc0:	4461      	add	r1, ip
 8000cc2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cc6:	fba0 9402 	umull	r9, r4, r0, r2
 8000cca:	eba1 010e 	sub.w	r1, r1, lr
 8000cce:	42a1      	cmp	r1, r4
 8000cd0:	46c8      	mov	r8, r9
 8000cd2:	46a6      	mov	lr, r4
 8000cd4:	d356      	bcc.n	8000d84 <__udivmoddi4+0x2a4>
 8000cd6:	d053      	beq.n	8000d80 <__udivmoddi4+0x2a0>
 8000cd8:	b15d      	cbz	r5, 8000cf2 <__udivmoddi4+0x212>
 8000cda:	ebb3 0208 	subs.w	r2, r3, r8
 8000cde:	eb61 010e 	sbc.w	r1, r1, lr
 8000ce2:	fa01 f707 	lsl.w	r7, r1, r7
 8000ce6:	fa22 f306 	lsr.w	r3, r2, r6
 8000cea:	40f1      	lsrs	r1, r6
 8000cec:	431f      	orrs	r7, r3
 8000cee:	e9c5 7100 	strd	r7, r1, [r5]
 8000cf2:	2600      	movs	r6, #0
 8000cf4:	4631      	mov	r1, r6
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	f1c2 0320 	rsb	r3, r2, #32
 8000cfe:	40d8      	lsrs	r0, r3
 8000d00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d04:	fa21 f303 	lsr.w	r3, r1, r3
 8000d08:	4091      	lsls	r1, r2
 8000d0a:	4301      	orrs	r1, r0
 8000d0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d10:	fa1f fe8c 	uxth.w	lr, ip
 8000d14:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d18:	fb07 3610 	mls	r6, r7, r0, r3
 8000d1c:	0c0b      	lsrs	r3, r1, #16
 8000d1e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d22:	fb00 f60e 	mul.w	r6, r0, lr
 8000d26:	429e      	cmp	r6, r3
 8000d28:	fa04 f402 	lsl.w	r4, r4, r2
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x260>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d36:	d22f      	bcs.n	8000d98 <__udivmoddi4+0x2b8>
 8000d38:	429e      	cmp	r6, r3
 8000d3a:	d92d      	bls.n	8000d98 <__udivmoddi4+0x2b8>
 8000d3c:	3802      	subs	r0, #2
 8000d3e:	4463      	add	r3, ip
 8000d40:	1b9b      	subs	r3, r3, r6
 8000d42:	b289      	uxth	r1, r1
 8000d44:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d48:	fb07 3316 	mls	r3, r7, r6, r3
 8000d4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d50:	fb06 f30e 	mul.w	r3, r6, lr
 8000d54:	428b      	cmp	r3, r1
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x28a>
 8000d58:	eb1c 0101 	adds.w	r1, ip, r1
 8000d5c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d60:	d216      	bcs.n	8000d90 <__udivmoddi4+0x2b0>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d914      	bls.n	8000d90 <__udivmoddi4+0x2b0>
 8000d66:	3e02      	subs	r6, #2
 8000d68:	4461      	add	r1, ip
 8000d6a:	1ac9      	subs	r1, r1, r3
 8000d6c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d70:	e738      	b.n	8000be4 <__udivmoddi4+0x104>
 8000d72:	462e      	mov	r6, r5
 8000d74:	4628      	mov	r0, r5
 8000d76:	e705      	b.n	8000b84 <__udivmoddi4+0xa4>
 8000d78:	4606      	mov	r6, r0
 8000d7a:	e6e3      	b.n	8000b44 <__udivmoddi4+0x64>
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	e6f8      	b.n	8000b72 <__udivmoddi4+0x92>
 8000d80:	454b      	cmp	r3, r9
 8000d82:	d2a9      	bcs.n	8000cd8 <__udivmoddi4+0x1f8>
 8000d84:	ebb9 0802 	subs.w	r8, r9, r2
 8000d88:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d8c:	3801      	subs	r0, #1
 8000d8e:	e7a3      	b.n	8000cd8 <__udivmoddi4+0x1f8>
 8000d90:	4646      	mov	r6, r8
 8000d92:	e7ea      	b.n	8000d6a <__udivmoddi4+0x28a>
 8000d94:	4620      	mov	r0, r4
 8000d96:	e794      	b.n	8000cc2 <__udivmoddi4+0x1e2>
 8000d98:	4640      	mov	r0, r8
 8000d9a:	e7d1      	b.n	8000d40 <__udivmoddi4+0x260>
 8000d9c:	46d0      	mov	r8, sl
 8000d9e:	e77b      	b.n	8000c98 <__udivmoddi4+0x1b8>
 8000da0:	3b02      	subs	r3, #2
 8000da2:	4461      	add	r1, ip
 8000da4:	e732      	b.n	8000c0c <__udivmoddi4+0x12c>
 8000da6:	4630      	mov	r0, r6
 8000da8:	e709      	b.n	8000bbe <__udivmoddi4+0xde>
 8000daa:	4464      	add	r4, ip
 8000dac:	3802      	subs	r0, #2
 8000dae:	e742      	b.n	8000c36 <__udivmoddi4+0x156>

08000db0 <__aeabi_idiv0>:
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dba:	f000 fe35 	bl	8001a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dbe:	f000 f843 	bl	8000e48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc2:	f000 f905 	bl	8000fd0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000dc6:	f000 f8d9 	bl	8000f7c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000dca:	f000 f8a9 	bl	8000f20 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  while (MPU6050_Init(&hi2c1) == 1);
 8000dce:	bf00      	nop
 8000dd0:	481a      	ldr	r0, [pc, #104]	; (8000e3c <main+0x88>)
 8000dd2:	f000 f970 	bl	80010b6 <MPU6050_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d0f9      	beq.n	8000dd0 <main+0x1c>
  {
    /* USER CODE END WHILE */
//	strcpy((char*)buffer, "Hello!\r\n");
//	HAL_UART_Transmit(&huart2, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
//	HAL_Delay(500);
	MPU6050_Read_All(&hi2c1, &MPU6050);
 8000ddc:	4918      	ldr	r1, [pc, #96]	; (8000e40 <main+0x8c>)
 8000dde:	4817      	ldr	r0, [pc, #92]	; (8000e3c <main+0x88>)
 8000de0:	f000 f9c2 	bl	8001168 <MPU6050_Read_All>

	for(int i = 0; i < 3; i++){
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	e019      	b.n	8000e1e <main+0x6a>
		buffer[2*i] = (uint8_t)(MPU6050.Accel_X_RAW & 0xFF); //LSB
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <main+0x8c>)
 8000dec:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	3310      	adds	r3, #16
 8000df8:	443b      	add	r3, r7
 8000dfa:	f803 2c0c 	strb.w	r2, [r3, #-12]
		buffer[(2*i) + 1] =  (uint8_t)((MPU6050.Accel_X_RAW >> 8)& 0xFF);//MSB
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <main+0x8c>)
 8000e00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e04:	121b      	asrs	r3, r3, #8
 8000e06:	b21a      	sxth	r2, r3
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	b2d2      	uxtb	r2, r2
 8000e10:	3310      	adds	r3, #16
 8000e12:	443b      	add	r3, r7
 8000e14:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(int i = 0; i < 3; i++){
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	dde2      	ble.n	8000dea <main+0x36>

	}



	HAL_UART_Transmit(&huart2, buffer, 2, HAL_MAX_DELAY);
 8000e24:	1d39      	adds	r1, r7, #4
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	4805      	ldr	r0, [pc, #20]	; (8000e44 <main+0x90>)
 8000e2e:	f002 fdba 	bl	80039a6 <HAL_UART_Transmit>


	HAL_Delay (100);
 8000e32:	2064      	movs	r0, #100	; 0x64
 8000e34:	f000 fe6a 	bl	8001b0c <HAL_Delay>
	MPU6050_Read_All(&hi2c1, &MPU6050);
 8000e38:	e7d0      	b.n	8000ddc <main+0x28>
 8000e3a:	bf00      	nop
 8000e3c:	2000011c 	.word	0x2000011c
 8000e40:	200001b8 	.word	0x200001b8
 8000e44:	20000170 	.word	0x20000170

08000e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b094      	sub	sp, #80	; 0x50
 8000e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4e:	f107 0320 	add.w	r3, r7, #32
 8000e52:	2230      	movs	r2, #48	; 0x30
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f003 fc98 	bl	800478c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	4b29      	ldr	r3, [pc, #164]	; (8000f18 <SystemClock_Config+0xd0>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	4a28      	ldr	r2, [pc, #160]	; (8000f18 <SystemClock_Config+0xd0>)
 8000e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7c:	4b26      	ldr	r3, [pc, #152]	; (8000f18 <SystemClock_Config+0xd0>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e88:	2300      	movs	r3, #0
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	4b23      	ldr	r3, [pc, #140]	; (8000f1c <SystemClock_Config+0xd4>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e94:	4a21      	ldr	r2, [pc, #132]	; (8000f1c <SystemClock_Config+0xd4>)
 8000e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e9a:	6013      	str	r3, [r2, #0]
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <SystemClock_Config+0xd4>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eac:	2301      	movs	r3, #1
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb0:	2310      	movs	r3, #16
 8000eb2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ebc:	2310      	movs	r3, #16
 8000ebe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ec0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ec4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000eca:	2307      	movs	r3, #7
 8000ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ece:	f107 0320 	add.w	r3, r7, #32
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f002 f882 	bl	8002fdc <HAL_RCC_OscConfig>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ede:	f000 f8e5 	bl	80010ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee2:	230f      	movs	r3, #15
 8000ee4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	2102      	movs	r1, #2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f002 fae4 	bl	80034cc <HAL_RCC_ClockConfig>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000f0a:	f000 f8cf 	bl	80010ac <Error_Handler>
  }
}
 8000f0e:	bf00      	nop
 8000f10:	3750      	adds	r7, #80	; 0x50
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40007000 	.word	0x40007000

08000f20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <MX_I2C1_Init+0x50>)
 8000f26:	4a13      	ldr	r2, [pc, #76]	; (8000f74 <MX_I2C1_Init+0x54>)
 8000f28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <MX_I2C1_Init+0x50>)
 8000f2c:	4a12      	ldr	r2, [pc, #72]	; (8000f78 <MX_I2C1_Init+0x58>)
 8000f2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <MX_I2C1_Init+0x50>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f36:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <MX_I2C1_Init+0x50>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <MX_I2C1_Init+0x50>)
 8000f3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f44:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <MX_I2C1_Init+0x50>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <MX_I2C1_Init+0x50>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f50:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <MX_I2C1_Init+0x50>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <MX_I2C1_Init+0x50>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f5c:	4804      	ldr	r0, [pc, #16]	; (8000f70 <MX_I2C1_Init+0x50>)
 8000f5e:	f001 f87d 	bl	800205c <HAL_I2C_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f68:	f000 f8a0 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	2000011c 	.word	0x2000011c
 8000f74:	40005400 	.word	0x40005400
 8000f78:	000186a0 	.word	0x000186a0

08000f7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <MX_USART2_UART_Init+0x4c>)
 8000f82:	4a12      	ldr	r2, [pc, #72]	; (8000fcc <MX_USART2_UART_Init+0x50>)
 8000f84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <MX_USART2_UART_Init+0x4c>)
 8000f88:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <MX_USART2_UART_Init+0x4c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_USART2_UART_Init+0x4c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <MX_USART2_UART_Init+0x4c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_USART2_UART_Init+0x4c>)
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <MX_USART2_UART_Init+0x4c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <MX_USART2_UART_Init+0x4c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <MX_USART2_UART_Init+0x4c>)
 8000fb4:	f002 fcaa 	bl	800390c <HAL_UART_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fbe:	f000 f875 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000170 	.word	0x20000170
 8000fcc:	40004400 	.word	0x40004400

08000fd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	4b2d      	ldr	r3, [pc, #180]	; (80010a0 <MX_GPIO_Init+0xd0>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a2c      	ldr	r2, [pc, #176]	; (80010a0 <MX_GPIO_Init+0xd0>)
 8000ff0:	f043 0304 	orr.w	r3, r3, #4
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <MX_GPIO_Init+0xd0>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0304 	and.w	r3, r3, #4
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b26      	ldr	r3, [pc, #152]	; (80010a0 <MX_GPIO_Init+0xd0>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a25      	ldr	r2, [pc, #148]	; (80010a0 <MX_GPIO_Init+0xd0>)
 800100c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <MX_GPIO_Init+0xd0>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <MX_GPIO_Init+0xd0>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a1e      	ldr	r2, [pc, #120]	; (80010a0 <MX_GPIO_Init+0xd0>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <MX_GPIO_Init+0xd0>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <MX_GPIO_Init+0xd0>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a17      	ldr	r2, [pc, #92]	; (80010a0 <MX_GPIO_Init+0xd0>)
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <MX_GPIO_Init+0xd0>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	2120      	movs	r1, #32
 800105a:	4812      	ldr	r0, [pc, #72]	; (80010a4 <MX_GPIO_Init+0xd4>)
 800105c:	f000 ffe4 	bl	8002028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001060:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001066:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800106a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4619      	mov	r1, r3
 8001076:	480c      	ldr	r0, [pc, #48]	; (80010a8 <MX_GPIO_Init+0xd8>)
 8001078:	f000 fe52 	bl	8001d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800107c:	2320      	movs	r3, #32
 800107e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	2301      	movs	r3, #1
 8001082:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4619      	mov	r1, r3
 8001092:	4804      	ldr	r0, [pc, #16]	; (80010a4 <MX_GPIO_Init+0xd4>)
 8001094:	f000 fe44 	bl	8001d20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001098:	bf00      	nop
 800109a:	3728      	adds	r7, #40	; 0x28
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40020000 	.word	0x40020000
 80010a8:	40020800 	.word	0x40020800

080010ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b0:	b672      	cpsid	i
}
 80010b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <Error_Handler+0x8>

080010b6 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b088      	sub	sp, #32
 80010ba:	af04      	add	r7, sp, #16
 80010bc:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80010be:	2364      	movs	r3, #100	; 0x64
 80010c0:	9302      	str	r3, [sp, #8]
 80010c2:	2301      	movs	r3, #1
 80010c4:	9301      	str	r3, [sp, #4]
 80010c6:	f107 030f 	add.w	r3, r7, #15
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2301      	movs	r3, #1
 80010ce:	2275      	movs	r2, #117	; 0x75
 80010d0:	21d0      	movs	r1, #208	; 0xd0
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f001 fa00 	bl	80024d8 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	2b68      	cmp	r3, #104	; 0x68
 80010dc:	d13d      	bne.n	800115a <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80010e2:	2364      	movs	r3, #100	; 0x64
 80010e4:	9302      	str	r3, [sp, #8]
 80010e6:	2301      	movs	r3, #1
 80010e8:	9301      	str	r3, [sp, #4]
 80010ea:	f107 030e 	add.w	r3, r7, #14
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2301      	movs	r3, #1
 80010f2:	226b      	movs	r2, #107	; 0x6b
 80010f4:	21d0      	movs	r1, #208	; 0xd0
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f001 f8f4 	bl	80022e4 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80010fc:	2307      	movs	r3, #7
 80010fe:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001100:	2364      	movs	r3, #100	; 0x64
 8001102:	9302      	str	r3, [sp, #8]
 8001104:	2301      	movs	r3, #1
 8001106:	9301      	str	r3, [sp, #4]
 8001108:	f107 030e 	add.w	r3, r7, #14
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	2301      	movs	r3, #1
 8001110:	2219      	movs	r2, #25
 8001112:	21d0      	movs	r1, #208	; 0xd0
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f001 f8e5 	bl	80022e4 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800111a:	2300      	movs	r3, #0
 800111c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800111e:	2364      	movs	r3, #100	; 0x64
 8001120:	9302      	str	r3, [sp, #8]
 8001122:	2301      	movs	r3, #1
 8001124:	9301      	str	r3, [sp, #4]
 8001126:	f107 030e 	add.w	r3, r7, #14
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2301      	movs	r3, #1
 800112e:	221c      	movs	r2, #28
 8001130:	21d0      	movs	r1, #208	; 0xd0
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f001 f8d6 	bl	80022e4 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001138:	2300      	movs	r3, #0
 800113a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800113c:	2364      	movs	r3, #100	; 0x64
 800113e:	9302      	str	r3, [sp, #8]
 8001140:	2301      	movs	r3, #1
 8001142:	9301      	str	r3, [sp, #4]
 8001144:	f107 030e 	add.w	r3, r7, #14
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	2301      	movs	r3, #1
 800114c:	221b      	movs	r2, #27
 800114e:	21d0      	movs	r1, #208	; 0xd0
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f001 f8c7 	bl	80022e4 <HAL_I2C_Mem_Write>
        return 0;
 8001156:	2300      	movs	r3, #0
 8001158:	e000      	b.n	800115c <MPU6050_Init+0xa6>
    }
    return 1;
 800115a:	2301      	movs	r3, #1
}
 800115c:	4618      	mov	r0, r3
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	0000      	movs	r0, r0
	...

08001168 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800116c:	b094      	sub	sp, #80	; 0x50
 800116e:	af04      	add	r7, sp, #16
 8001170:	6078      	str	r0, [r7, #4]
 8001172:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001174:	2364      	movs	r3, #100	; 0x64
 8001176:	9302      	str	r3, [sp, #8]
 8001178:	230e      	movs	r3, #14
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	f107 0308 	add.w	r3, r7, #8
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	2301      	movs	r3, #1
 8001184:	223b      	movs	r2, #59	; 0x3b
 8001186:	21d0      	movs	r1, #208	; 0xd0
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f001 f9a5 	bl	80024d8 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800118e:	7a3b      	ldrb	r3, [r7, #8]
 8001190:	021b      	lsls	r3, r3, #8
 8001192:	b21a      	sxth	r2, r3
 8001194:	7a7b      	ldrb	r3, [r7, #9]
 8001196:	b21b      	sxth	r3, r3
 8001198:	4313      	orrs	r3, r2
 800119a:	b21a      	sxth	r2, r3
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80011a0:	7abb      	ldrb	r3, [r7, #10]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	7afb      	ldrb	r3, [r7, #11]
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b21a      	sxth	r2, r3
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80011b2:	7b3b      	ldrb	r3, [r7, #12]
 80011b4:	021b      	lsls	r3, r3, #8
 80011b6:	b21a      	sxth	r2, r3
 80011b8:	7b7b      	ldrb	r3, [r7, #13]
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	4313      	orrs	r3, r2
 80011be:	b21a      	sxth	r2, r3
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 80011c4:	7bbb      	ldrb	r3, [r7, #14]
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	b21a      	sxth	r2, r3
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	4313      	orrs	r3, r2
 80011d0:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 80011d2:	7c3b      	ldrb	r3, [r7, #16]
 80011d4:	021b      	lsls	r3, r3, #8
 80011d6:	b21a      	sxth	r2, r3
 80011d8:	7c7b      	ldrb	r3, [r7, #17]
 80011da:	b21b      	sxth	r3, r3
 80011dc:	4313      	orrs	r3, r2
 80011de:	b21a      	sxth	r2, r3
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 80011e4:	7cbb      	ldrb	r3, [r7, #18]
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	b21a      	sxth	r2, r3
 80011ea:	7cfb      	ldrb	r3, [r7, #19]
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	4313      	orrs	r3, r2
 80011f0:	b21a      	sxth	r2, r3
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 80011f6:	7d3b      	ldrb	r3, [r7, #20]
 80011f8:	021b      	lsls	r3, r3, #8
 80011fa:	b21a      	sxth	r2, r3
 80011fc:	7d7b      	ldrb	r3, [r7, #21]
 80011fe:	b21b      	sxth	r3, r3
 8001200:	4313      	orrs	r3, r2
 8001202:	b21a      	sxth	r2, r3
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f934 	bl	800047c <__aeabi_i2d>
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	4bbd      	ldr	r3, [pc, #756]	; (8001510 <MPU6050_Read_All+0x3a8>)
 800121a:	f7ff fac3 	bl	80007a4 <__aeabi_ddiv>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	6839      	ldr	r1, [r7, #0]
 8001224:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff f924 	bl	800047c <__aeabi_i2d>
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	4bb5      	ldr	r3, [pc, #724]	; (8001510 <MPU6050_Read_All+0x3a8>)
 800123a:	f7ff fab3 	bl	80007a4 <__aeabi_ddiv>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	6839      	ldr	r1, [r7, #0]
 8001244:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff f914 	bl	800047c <__aeabi_i2d>
 8001254:	a3a8      	add	r3, pc, #672	; (adr r3, 80014f8 <MPU6050_Read_All+0x390>)
 8001256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125a:	f7ff faa3 	bl	80007a4 <__aeabi_ddiv>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	6839      	ldr	r1, [r7, #0]
 8001264:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001268:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800126c:	ee07 3a90 	vmov	s15, r3
 8001270:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001274:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8001514 <MPU6050_Read_All+0x3ac>
 8001278:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800127c:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001518 <MPU6050_Read_All+0x3b0>
 8001280:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f8f3 	bl	800047c <__aeabi_i2d>
 8001296:	a39a      	add	r3, pc, #616	; (adr r3, 8001500 <MPU6050_Read_All+0x398>)
 8001298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129c:	f7ff fa82 	bl	80007a4 <__aeabi_ddiv>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	6839      	ldr	r1, [r7, #0]
 80012a6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff f8e3 	bl	800047c <__aeabi_i2d>
 80012b6:	a392      	add	r3, pc, #584	; (adr r3, 8001500 <MPU6050_Read_All+0x398>)
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	f7ff fa72 	bl	80007a4 <__aeabi_ddiv>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	6839      	ldr	r1, [r7, #0]
 80012c6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff f8d3 	bl	800047c <__aeabi_i2d>
 80012d6:	a38a      	add	r3, pc, #552	; (adr r3, 8001500 <MPU6050_Read_All+0x398>)
 80012d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012dc:	f7ff fa62 	bl	80007a4 <__aeabi_ddiv>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	6839      	ldr	r1, [r7, #0]
 80012e6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 80012ea:	f000 fc03 	bl	8001af4 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	4b8a      	ldr	r3, [pc, #552]	; (800151c <MPU6050_Read_All+0x3b4>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff f8b0 	bl	800045c <__aeabi_ui2d>
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	4b87      	ldr	r3, [pc, #540]	; (8001520 <MPU6050_Read_All+0x3b8>)
 8001302:	f7ff fa4f 	bl	80007a4 <__aeabi_ddiv>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 800130e:	f000 fbf1 	bl	8001af4 <HAL_GetTick>
 8001312:	4603      	mov	r3, r0
 8001314:	4a81      	ldr	r2, [pc, #516]	; (800151c <MPU6050_Read_All+0x3b4>)
 8001316:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800131e:	461a      	mov	r2, r3
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001326:	fb03 f202 	mul.w	r2, r3, r2
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001330:	4619      	mov	r1, r3
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001338:	fb01 f303 	mul.w	r3, r1, r3
 800133c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff f89c 	bl	800047c <__aeabi_i2d>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	ec43 2b10 	vmov	d0, r2, r3
 800134c:	f003 f84b 	bl	80043e6 <sqrt>
 8001350:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	f04f 0300 	mov.w	r3, #0
 800135c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001360:	f7ff fb5e 	bl	8000a20 <__aeabi_dcmpeq>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d11f      	bne.n	80013aa <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff f883 	bl	800047c <__aeabi_i2d>
 8001376:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800137a:	f7ff fa13 	bl	80007a4 <__aeabi_ddiv>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	ec43 2b17 	vmov	d7, r2, r3
 8001386:	eeb0 0a47 	vmov.f32	s0, s14
 800138a:	eef0 0a67 	vmov.f32	s1, s15
 800138e:	f002 fe7f 	bl	8004090 <atan>
 8001392:	ec51 0b10 	vmov	r0, r1, d0
 8001396:	a35c      	add	r3, pc, #368	; (adr r3, 8001508 <MPU6050_Read_All+0x3a0>)
 8001398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139c:	f7ff f8d8 	bl	8000550 <__aeabi_dmul>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80013a8:	e005      	b.n	80013b6 <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	f04f 0300 	mov.w	r3, #0
 80013b2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013bc:	425b      	negs	r3, r3
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff f85c 	bl	800047c <__aeabi_i2d>
 80013c4:	4682      	mov	sl, r0
 80013c6:	468b      	mov	fp, r1
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f854 	bl	800047c <__aeabi_i2d>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	ec43 2b11 	vmov	d1, r2, r3
 80013dc:	ec4b ab10 	vmov	d0, sl, fp
 80013e0:	f002 ffff 	bl	80043e2 <atan2>
 80013e4:	ec51 0b10 	vmov	r0, r1, d0
 80013e8:	a347      	add	r3, pc, #284	; (adr r3, 8001508 <MPU6050_Read_All+0x3a0>)
 80013ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ee:	f7ff f8af 	bl	8000550 <__aeabi_dmul>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	4b49      	ldr	r3, [pc, #292]	; (8001524 <MPU6050_Read_All+0x3bc>)
 8001400:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001404:	f7ff fb16 	bl	8000a34 <__aeabi_dcmplt>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d00a      	beq.n	8001424 <MPU6050_Read_All+0x2bc>
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	4b43      	ldr	r3, [pc, #268]	; (8001528 <MPU6050_Read_All+0x3c0>)
 800141a:	f7ff fb29 	bl	8000a70 <__aeabi_dcmpgt>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d114      	bne.n	800144e <MPU6050_Read_All+0x2e6>
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	4b3f      	ldr	r3, [pc, #252]	; (8001528 <MPU6050_Read_All+0x3c0>)
 800142a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800142e:	f7ff fb1f 	bl	8000a70 <__aeabi_dcmpgt>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d015      	beq.n	8001464 <MPU6050_Read_All+0x2fc>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	4b38      	ldr	r3, [pc, #224]	; (8001524 <MPU6050_Read_All+0x3bc>)
 8001444:	f7ff faf6 	bl	8000a34 <__aeabi_dcmplt>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00a      	beq.n	8001464 <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 800144e:	4937      	ldr	r1, [pc, #220]	; (800152c <MPU6050_Read_All+0x3c4>)
 8001450:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001454:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001458:	6839      	ldr	r1, [r7, #0]
 800145a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800145e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001462:	e014      	b.n	800148e <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800146a:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800146e:	eeb0 1a47 	vmov.f32	s2, s14
 8001472:	eef0 1a67 	vmov.f32	s3, s15
 8001476:	ed97 0b06 	vldr	d0, [r7, #24]
 800147a:	482c      	ldr	r0, [pc, #176]	; (800152c <MPU6050_Read_All+0x3c4>)
 800147c:	f000 f85a 	bl	8001534 <Kalman_getAngle>
 8001480:	eeb0 7a40 	vmov.f32	s14, s0
 8001484:	eef0 7a60 	vmov.f32	s15, s1
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001494:	4690      	mov	r8, r2
 8001496:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	4b22      	ldr	r3, [pc, #136]	; (8001528 <MPU6050_Read_All+0x3c0>)
 80014a0:	4640      	mov	r0, r8
 80014a2:	4649      	mov	r1, r9
 80014a4:	f7ff fae4 	bl	8000a70 <__aeabi_dcmpgt>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d008      	beq.n	80014c0 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80014b4:	4614      	mov	r4, r2
 80014b6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80014c6:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 80014ca:	eeb0 1a47 	vmov.f32	s2, s14
 80014ce:	eef0 1a67 	vmov.f32	s3, s15
 80014d2:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80014d6:	4816      	ldr	r0, [pc, #88]	; (8001530 <MPU6050_Read_All+0x3c8>)
 80014d8:	f000 f82c 	bl	8001534 <Kalman_getAngle>
 80014dc:	eeb0 7a40 	vmov.f32	s14, s0
 80014e0:	eef0 7a60 	vmov.f32	s15, s1
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 80014ea:	bf00      	nop
 80014ec:	3740      	adds	r7, #64	; 0x40
 80014ee:	46bd      	mov	sp, r7
 80014f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014f4:	f3af 8000 	nop.w
 80014f8:	00000000 	.word	0x00000000
 80014fc:	40cc2900 	.word	0x40cc2900
 8001500:	00000000 	.word	0x00000000
 8001504:	40606000 	.word	0x40606000
 8001508:	1a63c1f8 	.word	0x1a63c1f8
 800150c:	404ca5dc 	.word	0x404ca5dc
 8001510:	40d00000 	.word	0x40d00000
 8001514:	43aa0000 	.word	0x43aa0000
 8001518:	42121eb8 	.word	0x42121eb8
 800151c:	20000210 	.word	0x20000210
 8001520:	408f4000 	.word	0x408f4000
 8001524:	c0568000 	.word	0xc0568000
 8001528:	40568000 	.word	0x40568000
 800152c:	20000048 	.word	0x20000048
 8001530:	20000000 	.word	0x20000000

08001534 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001534:	b5b0      	push	{r4, r5, r7, lr}
 8001536:	b096      	sub	sp, #88	; 0x58
 8001538:	af00      	add	r7, sp, #0
 800153a:	61f8      	str	r0, [r7, #28]
 800153c:	ed87 0b04 	vstr	d0, [r7, #16]
 8001540:	ed87 1b02 	vstr	d1, [r7, #8]
 8001544:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800154e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001552:	f7fe fe45 	bl	80001e0 <__aeabi_dsub>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001564:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001568:	e9d7 0100 	ldrd	r0, r1, [r7]
 800156c:	f7fe fff0 	bl	8000550 <__aeabi_dmul>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4620      	mov	r0, r4
 8001576:	4629      	mov	r1, r5
 8001578:	f7fe fe34 	bl	80001e4 <__adddf3>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	69f9      	ldr	r1, [r7, #28]
 8001582:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001592:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001596:	f7fe ffdb 	bl	8000550 <__aeabi_dmul>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80015a8:	f7fe fe1a 	bl	80001e0 <__aeabi_dsub>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4610      	mov	r0, r2
 80015b2:	4619      	mov	r1, r3
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80015ba:	f7fe fe11 	bl	80001e0 <__aeabi_dsub>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4610      	mov	r0, r2
 80015c4:	4619      	mov	r1, r3
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015cc:	f7fe fe0a 	bl	80001e4 <__adddf3>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4610      	mov	r0, r2
 80015d6:	4619      	mov	r1, r3
 80015d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015dc:	f7fe ffb8 	bl	8000550 <__aeabi_dmul>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4620      	mov	r0, r4
 80015e6:	4629      	mov	r1, r5
 80015e8:	f7fe fdfc 	bl	80001e4 <__adddf3>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	69f9      	ldr	r1, [r7, #28]
 80015f2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001602:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001606:	f7fe ffa3 	bl	8000550 <__aeabi_dmul>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4620      	mov	r0, r4
 8001610:	4629      	mov	r1, r5
 8001612:	f7fe fde5 	bl	80001e0 <__aeabi_dsub>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	69f9      	ldr	r1, [r7, #28]
 800161c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800162c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001630:	f7fe ff8e 	bl	8000550 <__aeabi_dmul>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	4620      	mov	r0, r4
 800163a:	4629      	mov	r1, r5
 800163c:	f7fe fdd0 	bl	80001e0 <__aeabi_dsub>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	69f9      	ldr	r1, [r7, #28]
 8001646:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001656:	e9d7 2300 	ldrd	r2, r3, [r7]
 800165a:	f7fe ff79 	bl	8000550 <__aeabi_dmul>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4620      	mov	r0, r4
 8001664:	4629      	mov	r1, r5
 8001666:	f7fe fdbd 	bl	80001e4 <__adddf3>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	69f9      	ldr	r1, [r7, #28]
 8001670:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001680:	f7fe fdb0 	bl	80001e4 <__adddf3>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001692:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001696:	f7ff f885 	bl	80007a4 <__aeabi_ddiv>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80016a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80016ac:	f7ff f87a 	bl	80007a4 <__aeabi_ddiv>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80016be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016c2:	f7fe fd8d 	bl	80001e0 <__aeabi_dsub>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80016d4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80016d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80016dc:	f7fe ff38 	bl	8000550 <__aeabi_dmul>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4620      	mov	r0, r4
 80016e6:	4629      	mov	r1, r5
 80016e8:	f7fe fd7c 	bl	80001e4 <__adddf3>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	69f9      	ldr	r1, [r7, #28]
 80016f2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80016fc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001700:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001704:	f7fe ff24 	bl	8000550 <__aeabi_dmul>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4620      	mov	r0, r4
 800170e:	4629      	mov	r1, r5
 8001710:	f7fe fd68 	bl	80001e4 <__adddf3>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	69f9      	ldr	r1, [r7, #28]
 800171a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001724:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800172e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001738:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800173c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001740:	f7fe ff06 	bl	8000550 <__aeabi_dmul>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4620      	mov	r0, r4
 800174a:	4629      	mov	r1, r5
 800174c:	f7fe fd48 	bl	80001e0 <__aeabi_dsub>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	69f9      	ldr	r1, [r7, #28]
 8001756:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001760:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001764:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001768:	f7fe fef2 	bl	8000550 <__aeabi_dmul>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4620      	mov	r0, r4
 8001772:	4629      	mov	r1, r5
 8001774:	f7fe fd34 	bl	80001e0 <__aeabi_dsub>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	69f9      	ldr	r1, [r7, #28]
 800177e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001788:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800178c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001790:	f7fe fede 	bl	8000550 <__aeabi_dmul>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4620      	mov	r0, r4
 800179a:	4629      	mov	r1, r5
 800179c:	f7fe fd20 	bl	80001e0 <__aeabi_dsub>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	69f9      	ldr	r1, [r7, #28]
 80017a6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80017b0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80017b4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80017b8:	f7fe feca 	bl	8000550 <__aeabi_dmul>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4620      	mov	r0, r4
 80017c2:	4629      	mov	r1, r5
 80017c4:	f7fe fd0c 	bl	80001e0 <__aeabi_dsub>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	69f9      	ldr	r1, [r7, #28]
 80017ce:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80017d8:	ec43 2b17 	vmov	d7, r2, r3
};
 80017dc:	eeb0 0a47 	vmov.f32	s0, s14
 80017e0:	eef0 0a67 	vmov.f32	s1, s15
 80017e4:	3758      	adds	r7, #88	; 0x58
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080017ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	607b      	str	r3, [r7, #4]
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <HAL_MspInit+0x4c>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	4a0f      	ldr	r2, [pc, #60]	; (8001838 <HAL_MspInit+0x4c>)
 80017fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001800:	6453      	str	r3, [r2, #68]	; 0x44
 8001802:	4b0d      	ldr	r3, [pc, #52]	; (8001838 <HAL_MspInit+0x4c>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	603b      	str	r3, [r7, #0]
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <HAL_MspInit+0x4c>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	4a08      	ldr	r2, [pc, #32]	; (8001838 <HAL_MspInit+0x4c>)
 8001818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800181c:	6413      	str	r3, [r2, #64]	; 0x40
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_MspInit+0x4c>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001826:	603b      	str	r3, [r7, #0]
 8001828:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800182a:	2007      	movs	r0, #7
 800182c:	f000 fa44 	bl	8001cb8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40023800 	.word	0x40023800

0800183c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a19      	ldr	r2, [pc, #100]	; (80018c0 <HAL_I2C_MspInit+0x84>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d12c      	bne.n	80018b8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <HAL_I2C_MspInit+0x88>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a17      	ldr	r2, [pc, #92]	; (80018c4 <HAL_I2C_MspInit+0x88>)
 8001868:	f043 0302 	orr.w	r3, r3, #2
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <HAL_I2C_MspInit+0x88>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800187a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800187e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001880:	2312      	movs	r3, #18
 8001882:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001888:	2303      	movs	r3, #3
 800188a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800188c:	2304      	movs	r3, #4
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	4619      	mov	r1, r3
 8001896:	480c      	ldr	r0, [pc, #48]	; (80018c8 <HAL_I2C_MspInit+0x8c>)
 8001898:	f000 fa42 	bl	8001d20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <HAL_I2C_MspInit+0x88>)
 80018a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a4:	4a07      	ldr	r2, [pc, #28]	; (80018c4 <HAL_I2C_MspInit+0x88>)
 80018a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018aa:	6413      	str	r3, [r2, #64]	; 0x40
 80018ac:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <HAL_I2C_MspInit+0x88>)
 80018ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018b8:	bf00      	nop
 80018ba:	3728      	adds	r7, #40	; 0x28
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40005400 	.word	0x40005400
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40020400 	.word	0x40020400

080018cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	; 0x28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a19      	ldr	r2, [pc, #100]	; (8001950 <HAL_UART_MspInit+0x84>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d12b      	bne.n	8001946 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	4b18      	ldr	r3, [pc, #96]	; (8001954 <HAL_UART_MspInit+0x88>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	4a17      	ldr	r2, [pc, #92]	; (8001954 <HAL_UART_MspInit+0x88>)
 80018f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018fc:	6413      	str	r3, [r2, #64]	; 0x40
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <HAL_UART_MspInit+0x88>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <HAL_UART_MspInit+0x88>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a10      	ldr	r2, [pc, #64]	; (8001954 <HAL_UART_MspInit+0x88>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <HAL_UART_MspInit+0x88>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001926:	230c      	movs	r3, #12
 8001928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192a:	2302      	movs	r3, #2
 800192c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001932:	2300      	movs	r3, #0
 8001934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001936:	2307      	movs	r3, #7
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193a:	f107 0314 	add.w	r3, r7, #20
 800193e:	4619      	mov	r1, r3
 8001940:	4805      	ldr	r0, [pc, #20]	; (8001958 <HAL_UART_MspInit+0x8c>)
 8001942:	f000 f9ed 	bl	8001d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001946:	bf00      	nop
 8001948:	3728      	adds	r7, #40	; 0x28
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40004400 	.word	0x40004400
 8001954:	40023800 	.word	0x40023800
 8001958:	40020000 	.word	0x40020000

0800195c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <NMI_Handler+0x4>

08001962 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001966:	e7fe      	b.n	8001966 <HardFault_Handler+0x4>

08001968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800196c:	e7fe      	b.n	800196c <MemManage_Handler+0x4>

0800196e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001972:	e7fe      	b.n	8001972 <BusFault_Handler+0x4>

08001974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <UsageFault_Handler+0x4>

0800197a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a8:	f000 f890 	bl	8001acc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <SystemInit+0x20>)
 80019b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ba:	4a05      	ldr	r2, [pc, #20]	; (80019d0 <SystemInit+0x20>)
 80019bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019d8:	480d      	ldr	r0, [pc, #52]	; (8001a10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019da:	490e      	ldr	r1, [pc, #56]	; (8001a14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019dc:	4a0e      	ldr	r2, [pc, #56]	; (8001a18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e0:	e002      	b.n	80019e8 <LoopCopyDataInit>

080019e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e6:	3304      	adds	r3, #4

080019e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019ec:	d3f9      	bcc.n	80019e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ee:	4a0b      	ldr	r2, [pc, #44]	; (8001a1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019f0:	4c0b      	ldr	r4, [pc, #44]	; (8001a20 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f4:	e001      	b.n	80019fa <LoopFillZerobss>

080019f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f8:	3204      	adds	r2, #4

080019fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019fc:	d3fb      	bcc.n	80019f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019fe:	f7ff ffd7 	bl	80019b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a02:	f002 fe9f 	bl	8004744 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a06:	f7ff f9d5 	bl	8000db4 <main>
  bx  lr    
 8001a0a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a0c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a14:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001a18:	08004850 	.word	0x08004850
  ldr r2, =_sbss
 8001a1c:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001a20:	20000218 	.word	0x20000218

08001a24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a24:	e7fe      	b.n	8001a24 <ADC_IRQHandler>
	...

08001a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a2c:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <HAL_Init+0x40>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a0d      	ldr	r2, [pc, #52]	; (8001a68 <HAL_Init+0x40>)
 8001a32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <HAL_Init+0x40>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <HAL_Init+0x40>)
 8001a3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a44:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <HAL_Init+0x40>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a07      	ldr	r2, [pc, #28]	; (8001a68 <HAL_Init+0x40>)
 8001a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a50:	2003      	movs	r0, #3
 8001a52:	f000 f931 	bl	8001cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a56:	2000      	movs	r0, #0
 8001a58:	f000 f808 	bl	8001a6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a5c:	f7ff fec6 	bl	80017ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40023c00 	.word	0x40023c00

08001a6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a74:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <HAL_InitTick+0x54>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <HAL_InitTick+0x58>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 f93b 	bl	8001d06 <HAL_SYSTICK_Config>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e00e      	b.n	8001ab8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b0f      	cmp	r3, #15
 8001a9e:	d80a      	bhi.n	8001ab6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa8:	f000 f911 	bl	8001cce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aac:	4a06      	ldr	r2, [pc, #24]	; (8001ac8 <HAL_InitTick+0x5c>)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e000      	b.n	8001ab8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000090 	.word	0x20000090
 8001ac4:	20000098 	.word	0x20000098
 8001ac8:	20000094 	.word	0x20000094

08001acc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_IncTick+0x20>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_IncTick+0x24>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4413      	add	r3, r2
 8001adc:	4a04      	ldr	r2, [pc, #16]	; (8001af0 <HAL_IncTick+0x24>)
 8001ade:	6013      	str	r3, [r2, #0]
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	20000098 	.word	0x20000098
 8001af0:	20000214 	.word	0x20000214

08001af4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return uwTick;
 8001af8:	4b03      	ldr	r3, [pc, #12]	; (8001b08 <HAL_GetTick+0x14>)
 8001afa:	681b      	ldr	r3, [r3, #0]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	20000214 	.word	0x20000214

08001b0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b14:	f7ff ffee 	bl	8001af4 <HAL_GetTick>
 8001b18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b24:	d005      	beq.n	8001b32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b26:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <HAL_Delay+0x44>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4413      	add	r3, r2
 8001b30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b32:	bf00      	nop
 8001b34:	f7ff ffde 	bl	8001af4 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d8f7      	bhi.n	8001b34 <HAL_Delay+0x28>
  {
  }
}
 8001b44:	bf00      	nop
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000098 	.word	0x20000098

08001b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <__NVIC_SetPriorityGrouping+0x44>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b6a:	68ba      	ldr	r2, [r7, #8]
 8001b6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b70:	4013      	ands	r3, r2
 8001b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b86:	4a04      	ldr	r2, [pc, #16]	; (8001b98 <__NVIC_SetPriorityGrouping+0x44>)
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	60d3      	str	r3, [r2, #12]
}
 8001b8c:	bf00      	nop
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba0:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	0a1b      	lsrs	r3, r3, #8
 8001ba6:	f003 0307 	and.w	r3, r3, #7
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	6039      	str	r1, [r7, #0]
 8001bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	db0a      	blt.n	8001be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	490c      	ldr	r1, [pc, #48]	; (8001c04 <__NVIC_SetPriority+0x4c>)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	0112      	lsls	r2, r2, #4
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	440b      	add	r3, r1
 8001bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be0:	e00a      	b.n	8001bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	4908      	ldr	r1, [pc, #32]	; (8001c08 <__NVIC_SetPriority+0x50>)
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	3b04      	subs	r3, #4
 8001bf0:	0112      	lsls	r2, r2, #4
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	761a      	strb	r2, [r3, #24]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	e000e100 	.word	0xe000e100
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b089      	sub	sp, #36	; 0x24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f1c3 0307 	rsb	r3, r3, #7
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	bf28      	it	cs
 8001c2a:	2304      	movcs	r3, #4
 8001c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3304      	adds	r3, #4
 8001c32:	2b06      	cmp	r3, #6
 8001c34:	d902      	bls.n	8001c3c <NVIC_EncodePriority+0x30>
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3b03      	subs	r3, #3
 8001c3a:	e000      	b.n	8001c3e <NVIC_EncodePriority+0x32>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	f04f 32ff 	mov.w	r2, #4294967295
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43da      	mvns	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	401a      	ands	r2, r3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c54:	f04f 31ff 	mov.w	r1, #4294967295
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5e:	43d9      	mvns	r1, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c64:	4313      	orrs	r3, r2
         );
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3724      	adds	r7, #36	; 0x24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c84:	d301      	bcc.n	8001c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c86:	2301      	movs	r3, #1
 8001c88:	e00f      	b.n	8001caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <SysTick_Config+0x40>)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c92:	210f      	movs	r1, #15
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295
 8001c98:	f7ff ff8e 	bl	8001bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <SysTick_Config+0x40>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ca2:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <SysTick_Config+0x40>)
 8001ca4:	2207      	movs	r2, #7
 8001ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	e000e010 	.word	0xe000e010

08001cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff ff47 	bl	8001b54 <__NVIC_SetPriorityGrouping>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b086      	sub	sp, #24
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce0:	f7ff ff5c 	bl	8001b9c <__NVIC_GetPriorityGrouping>
 8001ce4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	6978      	ldr	r0, [r7, #20]
 8001cec:	f7ff ff8e 	bl	8001c0c <NVIC_EncodePriority>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff5d 	bl	8001bb8 <__NVIC_SetPriority>
}
 8001cfe:	bf00      	nop
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7ff ffb0 	bl	8001c74 <SysTick_Config>
 8001d14:	4603      	mov	r3, r0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b089      	sub	sp, #36	; 0x24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
 8001d3a:	e159      	b.n	8001ff0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	f040 8148 	bne.w	8001fea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d005      	beq.n	8001d72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d130      	bne.n	8001dd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001da8:	2201      	movs	r2, #1
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	091b      	lsrs	r3, r3, #4
 8001dbe:	f003 0201 	and.w	r2, r3, #1
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d017      	beq.n	8001e10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	2203      	movs	r2, #3
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d123      	bne.n	8001e64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	08da      	lsrs	r2, r3, #3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3208      	adds	r2, #8
 8001e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	220f      	movs	r2, #15
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	691a      	ldr	r2, [r3, #16]
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	08da      	lsrs	r2, r3, #3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3208      	adds	r2, #8
 8001e5e:	69b9      	ldr	r1, [r7, #24]
 8001e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	2203      	movs	r2, #3
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 0203 	and.w	r2, r3, #3
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 80a2 	beq.w	8001fea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	4b57      	ldr	r3, [pc, #348]	; (8002008 <HAL_GPIO_Init+0x2e8>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	4a56      	ldr	r2, [pc, #344]	; (8002008 <HAL_GPIO_Init+0x2e8>)
 8001eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb6:	4b54      	ldr	r3, [pc, #336]	; (8002008 <HAL_GPIO_Init+0x2e8>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ec2:	4a52      	ldr	r2, [pc, #328]	; (800200c <HAL_GPIO_Init+0x2ec>)
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	089b      	lsrs	r3, r3, #2
 8001ec8:	3302      	adds	r3, #2
 8001eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	220f      	movs	r2, #15
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a49      	ldr	r2, [pc, #292]	; (8002010 <HAL_GPIO_Init+0x2f0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d019      	beq.n	8001f22 <HAL_GPIO_Init+0x202>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a48      	ldr	r2, [pc, #288]	; (8002014 <HAL_GPIO_Init+0x2f4>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d013      	beq.n	8001f1e <HAL_GPIO_Init+0x1fe>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a47      	ldr	r2, [pc, #284]	; (8002018 <HAL_GPIO_Init+0x2f8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d00d      	beq.n	8001f1a <HAL_GPIO_Init+0x1fa>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a46      	ldr	r2, [pc, #280]	; (800201c <HAL_GPIO_Init+0x2fc>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d007      	beq.n	8001f16 <HAL_GPIO_Init+0x1f6>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a45      	ldr	r2, [pc, #276]	; (8002020 <HAL_GPIO_Init+0x300>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d101      	bne.n	8001f12 <HAL_GPIO_Init+0x1f2>
 8001f0e:	2304      	movs	r3, #4
 8001f10:	e008      	b.n	8001f24 <HAL_GPIO_Init+0x204>
 8001f12:	2307      	movs	r3, #7
 8001f14:	e006      	b.n	8001f24 <HAL_GPIO_Init+0x204>
 8001f16:	2303      	movs	r3, #3
 8001f18:	e004      	b.n	8001f24 <HAL_GPIO_Init+0x204>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e002      	b.n	8001f24 <HAL_GPIO_Init+0x204>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <HAL_GPIO_Init+0x204>
 8001f22:	2300      	movs	r3, #0
 8001f24:	69fa      	ldr	r2, [r7, #28]
 8001f26:	f002 0203 	and.w	r2, r2, #3
 8001f2a:	0092      	lsls	r2, r2, #2
 8001f2c:	4093      	lsls	r3, r2
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f34:	4935      	ldr	r1, [pc, #212]	; (800200c <HAL_GPIO_Init+0x2ec>)
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	089b      	lsrs	r3, r3, #2
 8001f3a:	3302      	adds	r3, #2
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f42:	4b38      	ldr	r3, [pc, #224]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f66:	4a2f      	ldr	r2, [pc, #188]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f6c:	4b2d      	ldr	r3, [pc, #180]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f90:	4a24      	ldr	r2, [pc, #144]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f96:	4b23      	ldr	r3, [pc, #140]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fba:	4a1a      	ldr	r2, [pc, #104]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fc0:	4b18      	ldr	r3, [pc, #96]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fe4:	4a0f      	ldr	r2, [pc, #60]	; (8002024 <HAL_GPIO_Init+0x304>)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3301      	adds	r3, #1
 8001fee:	61fb      	str	r3, [r7, #28]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	2b0f      	cmp	r3, #15
 8001ff4:	f67f aea2 	bls.w	8001d3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	3724      	adds	r7, #36	; 0x24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800
 800200c:	40013800 	.word	0x40013800
 8002010:	40020000 	.word	0x40020000
 8002014:	40020400 	.word	0x40020400
 8002018:	40020800 	.word	0x40020800
 800201c:	40020c00 	.word	0x40020c00
 8002020:	40021000 	.word	0x40021000
 8002024:	40013c00 	.word	0x40013c00

08002028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	807b      	strh	r3, [r7, #2]
 8002034:	4613      	mov	r3, r2
 8002036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002038:	787b      	ldrb	r3, [r7, #1]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800203e:	887a      	ldrh	r2, [r7, #2]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002044:	e003      	b.n	800204e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002046:	887b      	ldrh	r3, [r7, #2]
 8002048:	041a      	lsls	r2, r3, #16
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	619a      	str	r2, [r3, #24]
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
	...

0800205c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e12b      	b.n	80022c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d106      	bne.n	8002088 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff fbda 	bl	800183c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2224      	movs	r2, #36	; 0x24
 800208c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0201 	bic.w	r2, r2, #1
 800209e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020c0:	f001 fbfc 	bl	80038bc <HAL_RCC_GetPCLK1Freq>
 80020c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	4a81      	ldr	r2, [pc, #516]	; (80022d0 <HAL_I2C_Init+0x274>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d807      	bhi.n	80020e0 <HAL_I2C_Init+0x84>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4a80      	ldr	r2, [pc, #512]	; (80022d4 <HAL_I2C_Init+0x278>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	bf94      	ite	ls
 80020d8:	2301      	movls	r3, #1
 80020da:	2300      	movhi	r3, #0
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	e006      	b.n	80020ee <HAL_I2C_Init+0x92>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4a7d      	ldr	r2, [pc, #500]	; (80022d8 <HAL_I2C_Init+0x27c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	bf94      	ite	ls
 80020e8:	2301      	movls	r3, #1
 80020ea:	2300      	movhi	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e0e7      	b.n	80022c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4a78      	ldr	r2, [pc, #480]	; (80022dc <HAL_I2C_Init+0x280>)
 80020fa:	fba2 2303 	umull	r2, r3, r2, r3
 80020fe:	0c9b      	lsrs	r3, r3, #18
 8002100:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68ba      	ldr	r2, [r7, #8]
 8002112:	430a      	orrs	r2, r1
 8002114:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	4a6a      	ldr	r2, [pc, #424]	; (80022d0 <HAL_I2C_Init+0x274>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d802      	bhi.n	8002130 <HAL_I2C_Init+0xd4>
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	3301      	adds	r3, #1
 800212e:	e009      	b.n	8002144 <HAL_I2C_Init+0xe8>
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002136:	fb02 f303 	mul.w	r3, r2, r3
 800213a:	4a69      	ldr	r2, [pc, #420]	; (80022e0 <HAL_I2C_Init+0x284>)
 800213c:	fba2 2303 	umull	r2, r3, r2, r3
 8002140:	099b      	lsrs	r3, r3, #6
 8002142:	3301      	adds	r3, #1
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6812      	ldr	r2, [r2, #0]
 8002148:	430b      	orrs	r3, r1
 800214a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002156:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	495c      	ldr	r1, [pc, #368]	; (80022d0 <HAL_I2C_Init+0x274>)
 8002160:	428b      	cmp	r3, r1
 8002162:	d819      	bhi.n	8002198 <HAL_I2C_Init+0x13c>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	1e59      	subs	r1, r3, #1
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002172:	1c59      	adds	r1, r3, #1
 8002174:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002178:	400b      	ands	r3, r1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00a      	beq.n	8002194 <HAL_I2C_Init+0x138>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	1e59      	subs	r1, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	fbb1 f3f3 	udiv	r3, r1, r3
 800218c:	3301      	adds	r3, #1
 800218e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002192:	e051      	b.n	8002238 <HAL_I2C_Init+0x1dc>
 8002194:	2304      	movs	r3, #4
 8002196:	e04f      	b.n	8002238 <HAL_I2C_Init+0x1dc>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d111      	bne.n	80021c4 <HAL_I2C_Init+0x168>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	1e58      	subs	r0, r3, #1
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6859      	ldr	r1, [r3, #4]
 80021a8:	460b      	mov	r3, r1
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	440b      	add	r3, r1
 80021ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80021b2:	3301      	adds	r3, #1
 80021b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	bf0c      	ite	eq
 80021bc:	2301      	moveq	r3, #1
 80021be:	2300      	movne	r3, #0
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	e012      	b.n	80021ea <HAL_I2C_Init+0x18e>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	1e58      	subs	r0, r3, #1
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6859      	ldr	r1, [r3, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	0099      	lsls	r1, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021da:	3301      	adds	r3, #1
 80021dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	bf0c      	ite	eq
 80021e4:	2301      	moveq	r3, #1
 80021e6:	2300      	movne	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_I2C_Init+0x196>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e022      	b.n	8002238 <HAL_I2C_Init+0x1dc>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10e      	bne.n	8002218 <HAL_I2C_Init+0x1bc>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	1e58      	subs	r0, r3, #1
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6859      	ldr	r1, [r3, #4]
 8002202:	460b      	mov	r3, r1
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	440b      	add	r3, r1
 8002208:	fbb0 f3f3 	udiv	r3, r0, r3
 800220c:	3301      	adds	r3, #1
 800220e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002216:	e00f      	b.n	8002238 <HAL_I2C_Init+0x1dc>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	1e58      	subs	r0, r3, #1
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6859      	ldr	r1, [r3, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	440b      	add	r3, r1
 8002226:	0099      	lsls	r1, r3, #2
 8002228:	440b      	add	r3, r1
 800222a:	fbb0 f3f3 	udiv	r3, r0, r3
 800222e:	3301      	adds	r3, #1
 8002230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002234:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	6809      	ldr	r1, [r1, #0]
 800223c:	4313      	orrs	r3, r2
 800223e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69da      	ldr	r2, [r3, #28]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002266:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6911      	ldr	r1, [r2, #16]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	68d2      	ldr	r2, [r2, #12]
 8002272:	4311      	orrs	r1, r2
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6812      	ldr	r2, [r2, #0]
 8002278:	430b      	orrs	r3, r1
 800227a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695a      	ldr	r2, [r3, #20]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0201 	orr.w	r2, r2, #1
 80022a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2220      	movs	r2, #32
 80022b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	000186a0 	.word	0x000186a0
 80022d4:	001e847f 	.word	0x001e847f
 80022d8:	003d08ff 	.word	0x003d08ff
 80022dc:	431bde83 	.word	0x431bde83
 80022e0:	10624dd3 	.word	0x10624dd3

080022e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af02      	add	r7, sp, #8
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	4608      	mov	r0, r1
 80022ee:	4611      	mov	r1, r2
 80022f0:	461a      	mov	r2, r3
 80022f2:	4603      	mov	r3, r0
 80022f4:	817b      	strh	r3, [r7, #10]
 80022f6:	460b      	mov	r3, r1
 80022f8:	813b      	strh	r3, [r7, #8]
 80022fa:	4613      	mov	r3, r2
 80022fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022fe:	f7ff fbf9 	bl	8001af4 <HAL_GetTick>
 8002302:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b20      	cmp	r3, #32
 800230e:	f040 80d9 	bne.w	80024c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	2319      	movs	r3, #25
 8002318:	2201      	movs	r2, #1
 800231a:	496d      	ldr	r1, [pc, #436]	; (80024d0 <HAL_I2C_Mem_Write+0x1ec>)
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f000 fc7f 	bl	8002c20 <I2C_WaitOnFlagUntilTimeout>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002328:	2302      	movs	r3, #2
 800232a:	e0cc      	b.n	80024c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002332:	2b01      	cmp	r3, #1
 8002334:	d101      	bne.n	800233a <HAL_I2C_Mem_Write+0x56>
 8002336:	2302      	movs	r3, #2
 8002338:	e0c5      	b.n	80024c6 <HAL_I2C_Mem_Write+0x1e2>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b01      	cmp	r3, #1
 800234e:	d007      	beq.n	8002360 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 0201 	orr.w	r2, r2, #1
 800235e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800236e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2221      	movs	r2, #33	; 0x21
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2240      	movs	r2, #64	; 0x40
 800237c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6a3a      	ldr	r2, [r7, #32]
 800238a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002390:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002396:	b29a      	uxth	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4a4d      	ldr	r2, [pc, #308]	; (80024d4 <HAL_I2C_Mem_Write+0x1f0>)
 80023a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023a2:	88f8      	ldrh	r0, [r7, #6]
 80023a4:	893a      	ldrh	r2, [r7, #8]
 80023a6:	8979      	ldrh	r1, [r7, #10]
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	9301      	str	r3, [sp, #4]
 80023ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	4603      	mov	r3, r0
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 fab6 	bl	8002924 <I2C_RequestMemoryWrite>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d052      	beq.n	8002464 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e081      	b.n	80024c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 fd00 	bl	8002dcc <I2C_WaitOnTXEFlagUntilTimeout>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00d      	beq.n	80023ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d107      	bne.n	80023ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e06b      	b.n	80024c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	781a      	ldrb	r2, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	1c5a      	adds	r2, r3, #1
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002408:	3b01      	subs	r3, #1
 800240a:	b29a      	uxth	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002414:	b29b      	uxth	r3, r3
 8002416:	3b01      	subs	r3, #1
 8002418:	b29a      	uxth	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b04      	cmp	r3, #4
 800242a:	d11b      	bne.n	8002464 <HAL_I2C_Mem_Write+0x180>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002430:	2b00      	cmp	r3, #0
 8002432:	d017      	beq.n	8002464 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	781a      	ldrb	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244e:	3b01      	subs	r3, #1
 8002450:	b29a      	uxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245a:	b29b      	uxth	r3, r3
 800245c:	3b01      	subs	r3, #1
 800245e:	b29a      	uxth	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1aa      	bne.n	80023c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800246c:	697a      	ldr	r2, [r7, #20]
 800246e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 fcec 	bl	8002e4e <I2C_WaitOnBTFFlagUntilTimeout>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00d      	beq.n	8002498 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002480:	2b04      	cmp	r3, #4
 8002482:	d107      	bne.n	8002494 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002492:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e016      	b.n	80024c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2220      	movs	r2, #32
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	e000      	b.n	80024c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80024c4:	2302      	movs	r3, #2
  }
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	00100002 	.word	0x00100002
 80024d4:	ffff0000 	.word	0xffff0000

080024d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08c      	sub	sp, #48	; 0x30
 80024dc:	af02      	add	r7, sp, #8
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	4608      	mov	r0, r1
 80024e2:	4611      	mov	r1, r2
 80024e4:	461a      	mov	r2, r3
 80024e6:	4603      	mov	r3, r0
 80024e8:	817b      	strh	r3, [r7, #10]
 80024ea:	460b      	mov	r3, r1
 80024ec:	813b      	strh	r3, [r7, #8]
 80024ee:	4613      	mov	r3, r2
 80024f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024f2:	f7ff faff 	bl	8001af4 <HAL_GetTick>
 80024f6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b20      	cmp	r3, #32
 8002502:	f040 8208 	bne.w	8002916 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	2319      	movs	r3, #25
 800250c:	2201      	movs	r2, #1
 800250e:	497b      	ldr	r1, [pc, #492]	; (80026fc <HAL_I2C_Mem_Read+0x224>)
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f000 fb85 	bl	8002c20 <I2C_WaitOnFlagUntilTimeout>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800251c:	2302      	movs	r3, #2
 800251e:	e1fb      	b.n	8002918 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002526:	2b01      	cmp	r3, #1
 8002528:	d101      	bne.n	800252e <HAL_I2C_Mem_Read+0x56>
 800252a:	2302      	movs	r3, #2
 800252c:	e1f4      	b.n	8002918 <HAL_I2C_Mem_Read+0x440>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b01      	cmp	r3, #1
 8002542:	d007      	beq.n	8002554 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002562:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2222      	movs	r2, #34	; 0x22
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2240      	movs	r2, #64	; 0x40
 8002570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800257e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002584:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258a:	b29a      	uxth	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4a5b      	ldr	r2, [pc, #364]	; (8002700 <HAL_I2C_Mem_Read+0x228>)
 8002594:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002596:	88f8      	ldrh	r0, [r7, #6]
 8002598:	893a      	ldrh	r2, [r7, #8]
 800259a:	8979      	ldrh	r1, [r7, #10]
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	9301      	str	r3, [sp, #4]
 80025a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	4603      	mov	r3, r0
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 fa52 	bl	8002a50 <I2C_RequestMemoryRead>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e1b0      	b.n	8002918 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d113      	bne.n	80025e6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025be:	2300      	movs	r3, #0
 80025c0:	623b      	str	r3, [r7, #32]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	623b      	str	r3, [r7, #32]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	623b      	str	r3, [r7, #32]
 80025d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	e184      	b.n	80028f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d11b      	bne.n	8002626 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025fe:	2300      	movs	r3, #0
 8002600:	61fb      	str	r3, [r7, #28]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	61fb      	str	r3, [r7, #28]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	61fb      	str	r3, [r7, #28]
 8002612:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	e164      	b.n	80028f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262a:	2b02      	cmp	r3, #2
 800262c:	d11b      	bne.n	8002666 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800263c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800264c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800264e:	2300      	movs	r3, #0
 8002650:	61bb      	str	r3, [r7, #24]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	61bb      	str	r3, [r7, #24]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	61bb      	str	r3, [r7, #24]
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	e144      	b.n	80028f0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	617b      	str	r3, [r7, #20]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	617b      	str	r3, [r7, #20]
 800267a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800267c:	e138      	b.n	80028f0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002682:	2b03      	cmp	r3, #3
 8002684:	f200 80f1 	bhi.w	800286a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268c:	2b01      	cmp	r3, #1
 800268e:	d123      	bne.n	80026d8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002692:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 fc1b 	bl	8002ed0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e139      	b.n	8002918 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	691a      	ldr	r2, [r3, #16]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c0:	3b01      	subs	r3, #1
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	3b01      	subs	r3, #1
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026d6:	e10b      	b.n	80028f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d14e      	bne.n	800277e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e6:	2200      	movs	r2, #0
 80026e8:	4906      	ldr	r1, [pc, #24]	; (8002704 <HAL_I2C_Mem_Read+0x22c>)
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f000 fa98 	bl	8002c20 <I2C_WaitOnFlagUntilTimeout>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d008      	beq.n	8002708 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e10e      	b.n	8002918 <HAL_I2C_Mem_Read+0x440>
 80026fa:	bf00      	nop
 80026fc:	00100002 	.word	0x00100002
 8002700:	ffff0000 	.word	0xffff0000
 8002704:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002716:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	691a      	ldr	r2, [r3, #16]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002734:	3b01      	subs	r3, #1
 8002736:	b29a      	uxth	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002740:	b29b      	uxth	r3, r3
 8002742:	3b01      	subs	r3, #1
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	691a      	ldr	r2, [r3, #16]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002766:	3b01      	subs	r3, #1
 8002768:	b29a      	uxth	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002772:	b29b      	uxth	r3, r3
 8002774:	3b01      	subs	r3, #1
 8002776:	b29a      	uxth	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800277c:	e0b8      	b.n	80028f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002784:	2200      	movs	r2, #0
 8002786:	4966      	ldr	r1, [pc, #408]	; (8002920 <HAL_I2C_Mem_Read+0x448>)
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 fa49 	bl	8002c20 <I2C_WaitOnFlagUntilTimeout>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e0bf      	b.n	8002918 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691a      	ldr	r2, [r3, #16]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c4:	3b01      	subs	r3, #1
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e0:	2200      	movs	r2, #0
 80027e2:	494f      	ldr	r1, [pc, #316]	; (8002920 <HAL_I2C_Mem_Read+0x448>)
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 fa1b 	bl	8002c20 <I2C_WaitOnFlagUntilTimeout>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e091      	b.n	8002918 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002802:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691a      	ldr	r2, [r3, #16]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002820:	3b01      	subs	r3, #1
 8002822:	b29a      	uxth	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282c:	b29b      	uxth	r3, r3
 800282e:	3b01      	subs	r3, #1
 8002830:	b29a      	uxth	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	691a      	ldr	r2, [r3, #16]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002852:	3b01      	subs	r3, #1
 8002854:	b29a      	uxth	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285e:	b29b      	uxth	r3, r3
 8002860:	3b01      	subs	r3, #1
 8002862:	b29a      	uxth	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002868:	e042      	b.n	80028f0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800286a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800286c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f000 fb2e 	bl	8002ed0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e04c      	b.n	8002918 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	691a      	ldr	r2, [r3, #16]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	1c5a      	adds	r2, r3, #1
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289a:	3b01      	subs	r3, #1
 800289c:	b29a      	uxth	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d118      	bne.n	80028f0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	1c5a      	adds	r2, r3, #1
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028da:	3b01      	subs	r3, #1
 80028dc:	b29a      	uxth	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f47f aec2 	bne.w	800267e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2220      	movs	r2, #32
 80028fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002912:	2300      	movs	r3, #0
 8002914:	e000      	b.n	8002918 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002916:	2302      	movs	r3, #2
  }
}
 8002918:	4618      	mov	r0, r3
 800291a:	3728      	adds	r7, #40	; 0x28
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	00010004 	.word	0x00010004

08002924 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af02      	add	r7, sp, #8
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	4608      	mov	r0, r1
 800292e:	4611      	mov	r1, r2
 8002930:	461a      	mov	r2, r3
 8002932:	4603      	mov	r3, r0
 8002934:	817b      	strh	r3, [r7, #10]
 8002936:	460b      	mov	r3, r1
 8002938:	813b      	strh	r3, [r7, #8]
 800293a:	4613      	mov	r3, r2
 800293c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800294c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	2200      	movs	r2, #0
 8002956:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 f960 	bl	8002c20 <I2C_WaitOnFlagUntilTimeout>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00d      	beq.n	8002982 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002974:	d103      	bne.n	800297e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800297c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e05f      	b.n	8002a42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002982:	897b      	ldrh	r3, [r7, #10]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	461a      	mov	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002990:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	6a3a      	ldr	r2, [r7, #32]
 8002996:	492d      	ldr	r1, [pc, #180]	; (8002a4c <I2C_RequestMemoryWrite+0x128>)
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 f998 	bl	8002cce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e04c      	b.n	8002a42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029a8:	2300      	movs	r3, #0
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c0:	6a39      	ldr	r1, [r7, #32]
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 fa02 	bl	8002dcc <I2C_WaitOnTXEFlagUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00d      	beq.n	80029ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d107      	bne.n	80029e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e02b      	b.n	8002a42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029ea:	88fb      	ldrh	r3, [r7, #6]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d105      	bne.n	80029fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029f0:	893b      	ldrh	r3, [r7, #8]
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	611a      	str	r2, [r3, #16]
 80029fa:	e021      	b.n	8002a40 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80029fc:	893b      	ldrh	r3, [r7, #8]
 80029fe:	0a1b      	lsrs	r3, r3, #8
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0c:	6a39      	ldr	r1, [r7, #32]
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 f9dc 	bl	8002dcc <I2C_WaitOnTXEFlagUntilTimeout>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00d      	beq.n	8002a36 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	d107      	bne.n	8002a32 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e005      	b.n	8002a42 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a36:	893b      	ldrh	r3, [r7, #8]
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	00010002 	.word	0x00010002

08002a50 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b088      	sub	sp, #32
 8002a54:	af02      	add	r7, sp, #8
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	4608      	mov	r0, r1
 8002a5a:	4611      	mov	r1, r2
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4603      	mov	r3, r0
 8002a60:	817b      	strh	r3, [r7, #10]
 8002a62:	460b      	mov	r3, r1
 8002a64:	813b      	strh	r3, [r7, #8]
 8002a66:	4613      	mov	r3, r2
 8002a68:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a78:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 f8c2 	bl	8002c20 <I2C_WaitOnFlagUntilTimeout>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00d      	beq.n	8002abe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ab0:	d103      	bne.n	8002aba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ab8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e0aa      	b.n	8002c14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002abe:	897b      	ldrh	r3, [r7, #10]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002acc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	6a3a      	ldr	r2, [r7, #32]
 8002ad2:	4952      	ldr	r1, [pc, #328]	; (8002c1c <I2C_RequestMemoryRead+0x1cc>)
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 f8fa 	bl	8002cce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e097      	b.n	8002c14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002afc:	6a39      	ldr	r1, [r7, #32]
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 f964 	bl	8002dcc <I2C_WaitOnTXEFlagUntilTimeout>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00d      	beq.n	8002b26 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d107      	bne.n	8002b22 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e076      	b.n	8002c14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b26:	88fb      	ldrh	r3, [r7, #6]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d105      	bne.n	8002b38 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b2c:	893b      	ldrh	r3, [r7, #8]
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	611a      	str	r2, [r3, #16]
 8002b36:	e021      	b.n	8002b7c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b38:	893b      	ldrh	r3, [r7, #8]
 8002b3a:	0a1b      	lsrs	r3, r3, #8
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b48:	6a39      	ldr	r1, [r7, #32]
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 f93e 	bl	8002dcc <I2C_WaitOnTXEFlagUntilTimeout>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00d      	beq.n	8002b72 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d107      	bne.n	8002b6e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b6c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e050      	b.n	8002c14 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b72:	893b      	ldrh	r3, [r7, #8]
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7e:	6a39      	ldr	r1, [r7, #32]
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 f923 	bl	8002dcc <I2C_WaitOnTXEFlagUntilTimeout>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00d      	beq.n	8002ba8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d107      	bne.n	8002ba4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ba2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e035      	b.n	8002c14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bb6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f000 f82b 	bl	8002c20 <I2C_WaitOnFlagUntilTimeout>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00d      	beq.n	8002bec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bde:	d103      	bne.n	8002be8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002be6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e013      	b.n	8002c14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002bec:	897b      	ldrh	r3, [r7, #10]
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	f043 0301 	orr.w	r3, r3, #1
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	6a3a      	ldr	r2, [r7, #32]
 8002c00:	4906      	ldr	r1, [pc, #24]	; (8002c1c <I2C_RequestMemoryRead+0x1cc>)
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 f863 	bl	8002cce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	00010002 	.word	0x00010002

08002c20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	603b      	str	r3, [r7, #0]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c30:	e025      	b.n	8002c7e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c38:	d021      	beq.n	8002c7e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c3a:	f7fe ff5b 	bl	8001af4 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d302      	bcc.n	8002c50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d116      	bne.n	8002c7e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	f043 0220 	orr.w	r2, r3, #32
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e023      	b.n	8002cc6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	0c1b      	lsrs	r3, r3, #16
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d10d      	bne.n	8002ca4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	43da      	mvns	r2, r3
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	4013      	ands	r3, r2
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	bf0c      	ite	eq
 8002c9a:	2301      	moveq	r3, #1
 8002c9c:	2300      	movne	r3, #0
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	e00c      	b.n	8002cbe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	43da      	mvns	r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	bf0c      	ite	eq
 8002cb6:	2301      	moveq	r3, #1
 8002cb8:	2300      	movne	r3, #0
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d0b6      	beq.n	8002c32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b084      	sub	sp, #16
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	607a      	str	r2, [r7, #4]
 8002cda:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cdc:	e051      	b.n	8002d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cec:	d123      	bne.n	8002d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cfc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d06:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2220      	movs	r2, #32
 8002d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f043 0204 	orr.w	r2, r3, #4
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e046      	b.n	8002dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3c:	d021      	beq.n	8002d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d3e:	f7fe fed9 	bl	8001af4 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d302      	bcc.n	8002d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d116      	bne.n	8002d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f043 0220 	orr.w	r2, r3, #32
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e020      	b.n	8002dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	0c1b      	lsrs	r3, r3, #16
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d10c      	bne.n	8002da6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	43da      	mvns	r2, r3
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	4013      	ands	r3, r2
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	bf14      	ite	ne
 8002d9e:	2301      	movne	r3, #1
 8002da0:	2300      	moveq	r3, #0
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	e00b      	b.n	8002dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	43da      	mvns	r2, r3
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	4013      	ands	r3, r2
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	bf14      	ite	ne
 8002db8:	2301      	movne	r3, #1
 8002dba:	2300      	moveq	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d18d      	bne.n	8002cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dd8:	e02d      	b.n	8002e36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 f8ce 	bl	8002f7c <I2C_IsAcknowledgeFailed>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e02d      	b.n	8002e46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df0:	d021      	beq.n	8002e36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df2:	f7fe fe7f 	bl	8001af4 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d302      	bcc.n	8002e08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d116      	bne.n	8002e36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2220      	movs	r2, #32
 8002e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f043 0220 	orr.w	r2, r3, #32
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e007      	b.n	8002e46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e40:	2b80      	cmp	r3, #128	; 0x80
 8002e42:	d1ca      	bne.n	8002dda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b084      	sub	sp, #16
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e5a:	e02d      	b.n	8002eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 f88d 	bl	8002f7c <I2C_IsAcknowledgeFailed>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e02d      	b.n	8002ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e72:	d021      	beq.n	8002eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e74:	f7fe fe3e 	bl	8001af4 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d302      	bcc.n	8002e8a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d116      	bne.n	8002eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	f043 0220 	orr.w	r2, r3, #32
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e007      	b.n	8002ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	f003 0304 	and.w	r3, r3, #4
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d1ca      	bne.n	8002e5c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002edc:	e042      	b.n	8002f64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	f003 0310 	and.w	r3, r3, #16
 8002ee8:	2b10      	cmp	r3, #16
 8002eea:	d119      	bne.n	8002f20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f06f 0210 	mvn.w	r2, #16
 8002ef4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e029      	b.n	8002f74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f20:	f7fe fde8 	bl	8001af4 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d302      	bcc.n	8002f36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d116      	bne.n	8002f64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	f043 0220 	orr.w	r2, r3, #32
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e007      	b.n	8002f74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6e:	2b40      	cmp	r3, #64	; 0x40
 8002f70:	d1b5      	bne.n	8002ede <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f92:	d11b      	bne.n	8002fcc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	f043 0204 	orr.w	r2, r3, #4
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e000      	b.n	8002fce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
	...

08002fdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e267      	b.n	80034be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d075      	beq.n	80030e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ffa:	4b88      	ldr	r3, [pc, #544]	; (800321c <HAL_RCC_OscConfig+0x240>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 030c 	and.w	r3, r3, #12
 8003002:	2b04      	cmp	r3, #4
 8003004:	d00c      	beq.n	8003020 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003006:	4b85      	ldr	r3, [pc, #532]	; (800321c <HAL_RCC_OscConfig+0x240>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800300e:	2b08      	cmp	r3, #8
 8003010:	d112      	bne.n	8003038 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003012:	4b82      	ldr	r3, [pc, #520]	; (800321c <HAL_RCC_OscConfig+0x240>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800301a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800301e:	d10b      	bne.n	8003038 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003020:	4b7e      	ldr	r3, [pc, #504]	; (800321c <HAL_RCC_OscConfig+0x240>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d05b      	beq.n	80030e4 <HAL_RCC_OscConfig+0x108>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d157      	bne.n	80030e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e242      	b.n	80034be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003040:	d106      	bne.n	8003050 <HAL_RCC_OscConfig+0x74>
 8003042:	4b76      	ldr	r3, [pc, #472]	; (800321c <HAL_RCC_OscConfig+0x240>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a75      	ldr	r2, [pc, #468]	; (800321c <HAL_RCC_OscConfig+0x240>)
 8003048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	e01d      	b.n	800308c <HAL_RCC_OscConfig+0xb0>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003058:	d10c      	bne.n	8003074 <HAL_RCC_OscConfig+0x98>
 800305a:	4b70      	ldr	r3, [pc, #448]	; (800321c <HAL_RCC_OscConfig+0x240>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a6f      	ldr	r2, [pc, #444]	; (800321c <HAL_RCC_OscConfig+0x240>)
 8003060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	4b6d      	ldr	r3, [pc, #436]	; (800321c <HAL_RCC_OscConfig+0x240>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a6c      	ldr	r2, [pc, #432]	; (800321c <HAL_RCC_OscConfig+0x240>)
 800306c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	e00b      	b.n	800308c <HAL_RCC_OscConfig+0xb0>
 8003074:	4b69      	ldr	r3, [pc, #420]	; (800321c <HAL_RCC_OscConfig+0x240>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a68      	ldr	r2, [pc, #416]	; (800321c <HAL_RCC_OscConfig+0x240>)
 800307a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800307e:	6013      	str	r3, [r2, #0]
 8003080:	4b66      	ldr	r3, [pc, #408]	; (800321c <HAL_RCC_OscConfig+0x240>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a65      	ldr	r2, [pc, #404]	; (800321c <HAL_RCC_OscConfig+0x240>)
 8003086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800308a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d013      	beq.n	80030bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003094:	f7fe fd2e 	bl	8001af4 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800309c:	f7fe fd2a 	bl	8001af4 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b64      	cmp	r3, #100	; 0x64
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e207      	b.n	80034be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ae:	4b5b      	ldr	r3, [pc, #364]	; (800321c <HAL_RCC_OscConfig+0x240>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0f0      	beq.n	800309c <HAL_RCC_OscConfig+0xc0>
 80030ba:	e014      	b.n	80030e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030bc:	f7fe fd1a 	bl	8001af4 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030c4:	f7fe fd16 	bl	8001af4 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b64      	cmp	r3, #100	; 0x64
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e1f3      	b.n	80034be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030d6:	4b51      	ldr	r3, [pc, #324]	; (800321c <HAL_RCC_OscConfig+0x240>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f0      	bne.n	80030c4 <HAL_RCC_OscConfig+0xe8>
 80030e2:	e000      	b.n	80030e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d063      	beq.n	80031ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030f2:	4b4a      	ldr	r3, [pc, #296]	; (800321c <HAL_RCC_OscConfig+0x240>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 030c 	and.w	r3, r3, #12
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00b      	beq.n	8003116 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030fe:	4b47      	ldr	r3, [pc, #284]	; (800321c <HAL_RCC_OscConfig+0x240>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003106:	2b08      	cmp	r3, #8
 8003108:	d11c      	bne.n	8003144 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800310a:	4b44      	ldr	r3, [pc, #272]	; (800321c <HAL_RCC_OscConfig+0x240>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d116      	bne.n	8003144 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003116:	4b41      	ldr	r3, [pc, #260]	; (800321c <HAL_RCC_OscConfig+0x240>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d005      	beq.n	800312e <HAL_RCC_OscConfig+0x152>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d001      	beq.n	800312e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e1c7      	b.n	80034be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800312e:	4b3b      	ldr	r3, [pc, #236]	; (800321c <HAL_RCC_OscConfig+0x240>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	4937      	ldr	r1, [pc, #220]	; (800321c <HAL_RCC_OscConfig+0x240>)
 800313e:	4313      	orrs	r3, r2
 8003140:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003142:	e03a      	b.n	80031ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d020      	beq.n	800318e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800314c:	4b34      	ldr	r3, [pc, #208]	; (8003220 <HAL_RCC_OscConfig+0x244>)
 800314e:	2201      	movs	r2, #1
 8003150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003152:	f7fe fccf 	bl	8001af4 <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003158:	e008      	b.n	800316c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800315a:	f7fe fccb 	bl	8001af4 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e1a8      	b.n	80034be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316c:	4b2b      	ldr	r3, [pc, #172]	; (800321c <HAL_RCC_OscConfig+0x240>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0f0      	beq.n	800315a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003178:	4b28      	ldr	r3, [pc, #160]	; (800321c <HAL_RCC_OscConfig+0x240>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	4925      	ldr	r1, [pc, #148]	; (800321c <HAL_RCC_OscConfig+0x240>)
 8003188:	4313      	orrs	r3, r2
 800318a:	600b      	str	r3, [r1, #0]
 800318c:	e015      	b.n	80031ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800318e:	4b24      	ldr	r3, [pc, #144]	; (8003220 <HAL_RCC_OscConfig+0x244>)
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003194:	f7fe fcae 	bl	8001af4 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800319c:	f7fe fcaa 	bl	8001af4 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e187      	b.n	80034be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ae:	4b1b      	ldr	r3, [pc, #108]	; (800321c <HAL_RCC_OscConfig+0x240>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f0      	bne.n	800319c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d036      	beq.n	8003234 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d016      	beq.n	80031fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ce:	4b15      	ldr	r3, [pc, #84]	; (8003224 <HAL_RCC_OscConfig+0x248>)
 80031d0:	2201      	movs	r2, #1
 80031d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d4:	f7fe fc8e 	bl	8001af4 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031dc:	f7fe fc8a 	bl	8001af4 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e167      	b.n	80034be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ee:	4b0b      	ldr	r3, [pc, #44]	; (800321c <HAL_RCC_OscConfig+0x240>)
 80031f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f0      	beq.n	80031dc <HAL_RCC_OscConfig+0x200>
 80031fa:	e01b      	b.n	8003234 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031fc:	4b09      	ldr	r3, [pc, #36]	; (8003224 <HAL_RCC_OscConfig+0x248>)
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003202:	f7fe fc77 	bl	8001af4 <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003208:	e00e      	b.n	8003228 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800320a:	f7fe fc73 	bl	8001af4 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d907      	bls.n	8003228 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e150      	b.n	80034be <HAL_RCC_OscConfig+0x4e2>
 800321c:	40023800 	.word	0x40023800
 8003220:	42470000 	.word	0x42470000
 8003224:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003228:	4b88      	ldr	r3, [pc, #544]	; (800344c <HAL_RCC_OscConfig+0x470>)
 800322a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1ea      	bne.n	800320a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 8097 	beq.w	8003370 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003242:	2300      	movs	r3, #0
 8003244:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003246:	4b81      	ldr	r3, [pc, #516]	; (800344c <HAL_RCC_OscConfig+0x470>)
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10f      	bne.n	8003272 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003252:	2300      	movs	r3, #0
 8003254:	60bb      	str	r3, [r7, #8]
 8003256:	4b7d      	ldr	r3, [pc, #500]	; (800344c <HAL_RCC_OscConfig+0x470>)
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	4a7c      	ldr	r2, [pc, #496]	; (800344c <HAL_RCC_OscConfig+0x470>)
 800325c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003260:	6413      	str	r3, [r2, #64]	; 0x40
 8003262:	4b7a      	ldr	r3, [pc, #488]	; (800344c <HAL_RCC_OscConfig+0x470>)
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800326a:	60bb      	str	r3, [r7, #8]
 800326c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800326e:	2301      	movs	r3, #1
 8003270:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003272:	4b77      	ldr	r3, [pc, #476]	; (8003450 <HAL_RCC_OscConfig+0x474>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327a:	2b00      	cmp	r3, #0
 800327c:	d118      	bne.n	80032b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800327e:	4b74      	ldr	r3, [pc, #464]	; (8003450 <HAL_RCC_OscConfig+0x474>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a73      	ldr	r2, [pc, #460]	; (8003450 <HAL_RCC_OscConfig+0x474>)
 8003284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003288:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800328a:	f7fe fc33 	bl	8001af4 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003292:	f7fe fc2f 	bl	8001af4 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e10c      	b.n	80034be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a4:	4b6a      	ldr	r3, [pc, #424]	; (8003450 <HAL_RCC_OscConfig+0x474>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0f0      	beq.n	8003292 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d106      	bne.n	80032c6 <HAL_RCC_OscConfig+0x2ea>
 80032b8:	4b64      	ldr	r3, [pc, #400]	; (800344c <HAL_RCC_OscConfig+0x470>)
 80032ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032bc:	4a63      	ldr	r2, [pc, #396]	; (800344c <HAL_RCC_OscConfig+0x470>)
 80032be:	f043 0301 	orr.w	r3, r3, #1
 80032c2:	6713      	str	r3, [r2, #112]	; 0x70
 80032c4:	e01c      	b.n	8003300 <HAL_RCC_OscConfig+0x324>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	2b05      	cmp	r3, #5
 80032cc:	d10c      	bne.n	80032e8 <HAL_RCC_OscConfig+0x30c>
 80032ce:	4b5f      	ldr	r3, [pc, #380]	; (800344c <HAL_RCC_OscConfig+0x470>)
 80032d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d2:	4a5e      	ldr	r2, [pc, #376]	; (800344c <HAL_RCC_OscConfig+0x470>)
 80032d4:	f043 0304 	orr.w	r3, r3, #4
 80032d8:	6713      	str	r3, [r2, #112]	; 0x70
 80032da:	4b5c      	ldr	r3, [pc, #368]	; (800344c <HAL_RCC_OscConfig+0x470>)
 80032dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032de:	4a5b      	ldr	r2, [pc, #364]	; (800344c <HAL_RCC_OscConfig+0x470>)
 80032e0:	f043 0301 	orr.w	r3, r3, #1
 80032e4:	6713      	str	r3, [r2, #112]	; 0x70
 80032e6:	e00b      	b.n	8003300 <HAL_RCC_OscConfig+0x324>
 80032e8:	4b58      	ldr	r3, [pc, #352]	; (800344c <HAL_RCC_OscConfig+0x470>)
 80032ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ec:	4a57      	ldr	r2, [pc, #348]	; (800344c <HAL_RCC_OscConfig+0x470>)
 80032ee:	f023 0301 	bic.w	r3, r3, #1
 80032f2:	6713      	str	r3, [r2, #112]	; 0x70
 80032f4:	4b55      	ldr	r3, [pc, #340]	; (800344c <HAL_RCC_OscConfig+0x470>)
 80032f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f8:	4a54      	ldr	r2, [pc, #336]	; (800344c <HAL_RCC_OscConfig+0x470>)
 80032fa:	f023 0304 	bic.w	r3, r3, #4
 80032fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d015      	beq.n	8003334 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003308:	f7fe fbf4 	bl	8001af4 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800330e:	e00a      	b.n	8003326 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003310:	f7fe fbf0 	bl	8001af4 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	f241 3288 	movw	r2, #5000	; 0x1388
 800331e:	4293      	cmp	r3, r2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e0cb      	b.n	80034be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003326:	4b49      	ldr	r3, [pc, #292]	; (800344c <HAL_RCC_OscConfig+0x470>)
 8003328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0ee      	beq.n	8003310 <HAL_RCC_OscConfig+0x334>
 8003332:	e014      	b.n	800335e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003334:	f7fe fbde 	bl	8001af4 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800333a:	e00a      	b.n	8003352 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800333c:	f7fe fbda 	bl	8001af4 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	f241 3288 	movw	r2, #5000	; 0x1388
 800334a:	4293      	cmp	r3, r2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e0b5      	b.n	80034be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003352:	4b3e      	ldr	r3, [pc, #248]	; (800344c <HAL_RCC_OscConfig+0x470>)
 8003354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1ee      	bne.n	800333c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800335e:	7dfb      	ldrb	r3, [r7, #23]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d105      	bne.n	8003370 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003364:	4b39      	ldr	r3, [pc, #228]	; (800344c <HAL_RCC_OscConfig+0x470>)
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	4a38      	ldr	r2, [pc, #224]	; (800344c <HAL_RCC_OscConfig+0x470>)
 800336a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800336e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 80a1 	beq.w	80034bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800337a:	4b34      	ldr	r3, [pc, #208]	; (800344c <HAL_RCC_OscConfig+0x470>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 030c 	and.w	r3, r3, #12
 8003382:	2b08      	cmp	r3, #8
 8003384:	d05c      	beq.n	8003440 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d141      	bne.n	8003412 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338e:	4b31      	ldr	r3, [pc, #196]	; (8003454 <HAL_RCC_OscConfig+0x478>)
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003394:	f7fe fbae 	bl	8001af4 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800339c:	f7fe fbaa 	bl	8001af4 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e087      	b.n	80034be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ae:	4b27      	ldr	r3, [pc, #156]	; (800344c <HAL_RCC_OscConfig+0x470>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1f0      	bne.n	800339c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69da      	ldr	r2, [r3, #28]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	019b      	lsls	r3, r3, #6
 80033ca:	431a      	orrs	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d0:	085b      	lsrs	r3, r3, #1
 80033d2:	3b01      	subs	r3, #1
 80033d4:	041b      	lsls	r3, r3, #16
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	061b      	lsls	r3, r3, #24
 80033de:	491b      	ldr	r1, [pc, #108]	; (800344c <HAL_RCC_OscConfig+0x470>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033e4:	4b1b      	ldr	r3, [pc, #108]	; (8003454 <HAL_RCC_OscConfig+0x478>)
 80033e6:	2201      	movs	r2, #1
 80033e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ea:	f7fe fb83 	bl	8001af4 <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f2:	f7fe fb7f 	bl	8001af4 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e05c      	b.n	80034be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003404:	4b11      	ldr	r3, [pc, #68]	; (800344c <HAL_RCC_OscConfig+0x470>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0f0      	beq.n	80033f2 <HAL_RCC_OscConfig+0x416>
 8003410:	e054      	b.n	80034bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003412:	4b10      	ldr	r3, [pc, #64]	; (8003454 <HAL_RCC_OscConfig+0x478>)
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003418:	f7fe fb6c 	bl	8001af4 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003420:	f7fe fb68 	bl	8001af4 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e045      	b.n	80034be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003432:	4b06      	ldr	r3, [pc, #24]	; (800344c <HAL_RCC_OscConfig+0x470>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1f0      	bne.n	8003420 <HAL_RCC_OscConfig+0x444>
 800343e:	e03d      	b.n	80034bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d107      	bne.n	8003458 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e038      	b.n	80034be <HAL_RCC_OscConfig+0x4e2>
 800344c:	40023800 	.word	0x40023800
 8003450:	40007000 	.word	0x40007000
 8003454:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003458:	4b1b      	ldr	r3, [pc, #108]	; (80034c8 <HAL_RCC_OscConfig+0x4ec>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d028      	beq.n	80034b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003470:	429a      	cmp	r2, r3
 8003472:	d121      	bne.n	80034b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800347e:	429a      	cmp	r2, r3
 8003480:	d11a      	bne.n	80034b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003488:	4013      	ands	r3, r2
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800348e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003490:	4293      	cmp	r3, r2
 8003492:	d111      	bne.n	80034b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349e:	085b      	lsrs	r3, r3, #1
 80034a0:	3b01      	subs	r3, #1
 80034a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d107      	bne.n	80034b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d001      	beq.n	80034bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e000      	b.n	80034be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40023800 	.word	0x40023800

080034cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e0cc      	b.n	800367a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034e0:	4b68      	ldr	r3, [pc, #416]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d90c      	bls.n	8003508 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ee:	4b65      	ldr	r3, [pc, #404]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f6:	4b63      	ldr	r3, [pc, #396]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	429a      	cmp	r2, r3
 8003502:	d001      	beq.n	8003508 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e0b8      	b.n	800367a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d020      	beq.n	8003556 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	d005      	beq.n	800352c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003520:	4b59      	ldr	r3, [pc, #356]	; (8003688 <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	4a58      	ldr	r2, [pc, #352]	; (8003688 <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800352a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0308 	and.w	r3, r3, #8
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003538:	4b53      	ldr	r3, [pc, #332]	; (8003688 <HAL_RCC_ClockConfig+0x1bc>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	4a52      	ldr	r2, [pc, #328]	; (8003688 <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003542:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003544:	4b50      	ldr	r3, [pc, #320]	; (8003688 <HAL_RCC_ClockConfig+0x1bc>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	494d      	ldr	r1, [pc, #308]	; (8003688 <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	4313      	orrs	r3, r2
 8003554:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d044      	beq.n	80035ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d107      	bne.n	800357a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356a:	4b47      	ldr	r3, [pc, #284]	; (8003688 <HAL_RCC_ClockConfig+0x1bc>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d119      	bne.n	80035aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e07f      	b.n	800367a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b02      	cmp	r3, #2
 8003580:	d003      	beq.n	800358a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003586:	2b03      	cmp	r3, #3
 8003588:	d107      	bne.n	800359a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800358a:	4b3f      	ldr	r3, [pc, #252]	; (8003688 <HAL_RCC_ClockConfig+0x1bc>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d109      	bne.n	80035aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e06f      	b.n	800367a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800359a:	4b3b      	ldr	r3, [pc, #236]	; (8003688 <HAL_RCC_ClockConfig+0x1bc>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e067      	b.n	800367a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035aa:	4b37      	ldr	r3, [pc, #220]	; (8003688 <HAL_RCC_ClockConfig+0x1bc>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f023 0203 	bic.w	r2, r3, #3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	4934      	ldr	r1, [pc, #208]	; (8003688 <HAL_RCC_ClockConfig+0x1bc>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035bc:	f7fe fa9a 	bl	8001af4 <HAL_GetTick>
 80035c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c2:	e00a      	b.n	80035da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c4:	f7fe fa96 	bl	8001af4 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e04f      	b.n	800367a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035da:	4b2b      	ldr	r3, [pc, #172]	; (8003688 <HAL_RCC_ClockConfig+0x1bc>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 020c 	and.w	r2, r3, #12
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d1eb      	bne.n	80035c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035ec:	4b25      	ldr	r3, [pc, #148]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d20c      	bcs.n	8003614 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fa:	4b22      	ldr	r3, [pc, #136]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003602:	4b20      	ldr	r3, [pc, #128]	; (8003684 <HAL_RCC_ClockConfig+0x1b8>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	429a      	cmp	r2, r3
 800360e:	d001      	beq.n	8003614 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e032      	b.n	800367a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b00      	cmp	r3, #0
 800361e:	d008      	beq.n	8003632 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003620:	4b19      	ldr	r3, [pc, #100]	; (8003688 <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	4916      	ldr	r1, [pc, #88]	; (8003688 <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	4313      	orrs	r3, r2
 8003630:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b00      	cmp	r3, #0
 800363c:	d009      	beq.n	8003652 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800363e:	4b12      	ldr	r3, [pc, #72]	; (8003688 <HAL_RCC_ClockConfig+0x1bc>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	490e      	ldr	r1, [pc, #56]	; (8003688 <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	4313      	orrs	r3, r2
 8003650:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003652:	f000 f821 	bl	8003698 <HAL_RCC_GetSysClockFreq>
 8003656:	4602      	mov	r2, r0
 8003658:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <HAL_RCC_ClockConfig+0x1bc>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	091b      	lsrs	r3, r3, #4
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	490a      	ldr	r1, [pc, #40]	; (800368c <HAL_RCC_ClockConfig+0x1c0>)
 8003664:	5ccb      	ldrb	r3, [r1, r3]
 8003666:	fa22 f303 	lsr.w	r3, r2, r3
 800366a:	4a09      	ldr	r2, [pc, #36]	; (8003690 <HAL_RCC_ClockConfig+0x1c4>)
 800366c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800366e:	4b09      	ldr	r3, [pc, #36]	; (8003694 <HAL_RCC_ClockConfig+0x1c8>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f7fe f9fa 	bl	8001a6c <HAL_InitTick>

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40023c00 	.word	0x40023c00
 8003688:	40023800 	.word	0x40023800
 800368c:	080047b8 	.word	0x080047b8
 8003690:	20000090 	.word	0x20000090
 8003694:	20000094 	.word	0x20000094

08003698 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800369c:	b094      	sub	sp, #80	; 0x50
 800369e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	647b      	str	r3, [r7, #68]	; 0x44
 80036a4:	2300      	movs	r3, #0
 80036a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036a8:	2300      	movs	r3, #0
 80036aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80036ac:	2300      	movs	r3, #0
 80036ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036b0:	4b79      	ldr	r3, [pc, #484]	; (8003898 <HAL_RCC_GetSysClockFreq+0x200>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 030c 	and.w	r3, r3, #12
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d00d      	beq.n	80036d8 <HAL_RCC_GetSysClockFreq+0x40>
 80036bc:	2b08      	cmp	r3, #8
 80036be:	f200 80e1 	bhi.w	8003884 <HAL_RCC_GetSysClockFreq+0x1ec>
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d002      	beq.n	80036cc <HAL_RCC_GetSysClockFreq+0x34>
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	d003      	beq.n	80036d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80036ca:	e0db      	b.n	8003884 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036cc:	4b73      	ldr	r3, [pc, #460]	; (800389c <HAL_RCC_GetSysClockFreq+0x204>)
 80036ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80036d0:	e0db      	b.n	800388a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036d2:	4b73      	ldr	r3, [pc, #460]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80036d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036d6:	e0d8      	b.n	800388a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036d8:	4b6f      	ldr	r3, [pc, #444]	; (8003898 <HAL_RCC_GetSysClockFreq+0x200>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036e2:	4b6d      	ldr	r3, [pc, #436]	; (8003898 <HAL_RCC_GetSysClockFreq+0x200>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d063      	beq.n	80037b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ee:	4b6a      	ldr	r3, [pc, #424]	; (8003898 <HAL_RCC_GetSysClockFreq+0x200>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	099b      	lsrs	r3, r3, #6
 80036f4:	2200      	movs	r2, #0
 80036f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80036f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80036fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003700:	633b      	str	r3, [r7, #48]	; 0x30
 8003702:	2300      	movs	r3, #0
 8003704:	637b      	str	r3, [r7, #52]	; 0x34
 8003706:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800370a:	4622      	mov	r2, r4
 800370c:	462b      	mov	r3, r5
 800370e:	f04f 0000 	mov.w	r0, #0
 8003712:	f04f 0100 	mov.w	r1, #0
 8003716:	0159      	lsls	r1, r3, #5
 8003718:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800371c:	0150      	lsls	r0, r2, #5
 800371e:	4602      	mov	r2, r0
 8003720:	460b      	mov	r3, r1
 8003722:	4621      	mov	r1, r4
 8003724:	1a51      	subs	r1, r2, r1
 8003726:	6139      	str	r1, [r7, #16]
 8003728:	4629      	mov	r1, r5
 800372a:	eb63 0301 	sbc.w	r3, r3, r1
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	f04f 0200 	mov.w	r2, #0
 8003734:	f04f 0300 	mov.w	r3, #0
 8003738:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800373c:	4659      	mov	r1, fp
 800373e:	018b      	lsls	r3, r1, #6
 8003740:	4651      	mov	r1, sl
 8003742:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003746:	4651      	mov	r1, sl
 8003748:	018a      	lsls	r2, r1, #6
 800374a:	4651      	mov	r1, sl
 800374c:	ebb2 0801 	subs.w	r8, r2, r1
 8003750:	4659      	mov	r1, fp
 8003752:	eb63 0901 	sbc.w	r9, r3, r1
 8003756:	f04f 0200 	mov.w	r2, #0
 800375a:	f04f 0300 	mov.w	r3, #0
 800375e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003762:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003766:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800376a:	4690      	mov	r8, r2
 800376c:	4699      	mov	r9, r3
 800376e:	4623      	mov	r3, r4
 8003770:	eb18 0303 	adds.w	r3, r8, r3
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	462b      	mov	r3, r5
 8003778:	eb49 0303 	adc.w	r3, r9, r3
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	f04f 0200 	mov.w	r2, #0
 8003782:	f04f 0300 	mov.w	r3, #0
 8003786:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800378a:	4629      	mov	r1, r5
 800378c:	024b      	lsls	r3, r1, #9
 800378e:	4621      	mov	r1, r4
 8003790:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003794:	4621      	mov	r1, r4
 8003796:	024a      	lsls	r2, r1, #9
 8003798:	4610      	mov	r0, r2
 800379a:	4619      	mov	r1, r3
 800379c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800379e:	2200      	movs	r2, #0
 80037a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80037a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037a8:	f7fd f982 	bl	8000ab0 <__aeabi_uldivmod>
 80037ac:	4602      	mov	r2, r0
 80037ae:	460b      	mov	r3, r1
 80037b0:	4613      	mov	r3, r2
 80037b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037b4:	e058      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037b6:	4b38      	ldr	r3, [pc, #224]	; (8003898 <HAL_RCC_GetSysClockFreq+0x200>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	099b      	lsrs	r3, r3, #6
 80037bc:	2200      	movs	r2, #0
 80037be:	4618      	mov	r0, r3
 80037c0:	4611      	mov	r1, r2
 80037c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037c6:	623b      	str	r3, [r7, #32]
 80037c8:	2300      	movs	r3, #0
 80037ca:	627b      	str	r3, [r7, #36]	; 0x24
 80037cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037d0:	4642      	mov	r2, r8
 80037d2:	464b      	mov	r3, r9
 80037d4:	f04f 0000 	mov.w	r0, #0
 80037d8:	f04f 0100 	mov.w	r1, #0
 80037dc:	0159      	lsls	r1, r3, #5
 80037de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037e2:	0150      	lsls	r0, r2, #5
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	4641      	mov	r1, r8
 80037ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80037ee:	4649      	mov	r1, r9
 80037f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003800:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003804:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003808:	ebb2 040a 	subs.w	r4, r2, sl
 800380c:	eb63 050b 	sbc.w	r5, r3, fp
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	f04f 0300 	mov.w	r3, #0
 8003818:	00eb      	lsls	r3, r5, #3
 800381a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800381e:	00e2      	lsls	r2, r4, #3
 8003820:	4614      	mov	r4, r2
 8003822:	461d      	mov	r5, r3
 8003824:	4643      	mov	r3, r8
 8003826:	18e3      	adds	r3, r4, r3
 8003828:	603b      	str	r3, [r7, #0]
 800382a:	464b      	mov	r3, r9
 800382c:	eb45 0303 	adc.w	r3, r5, r3
 8003830:	607b      	str	r3, [r7, #4]
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	f04f 0300 	mov.w	r3, #0
 800383a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800383e:	4629      	mov	r1, r5
 8003840:	028b      	lsls	r3, r1, #10
 8003842:	4621      	mov	r1, r4
 8003844:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003848:	4621      	mov	r1, r4
 800384a:	028a      	lsls	r2, r1, #10
 800384c:	4610      	mov	r0, r2
 800384e:	4619      	mov	r1, r3
 8003850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003852:	2200      	movs	r2, #0
 8003854:	61bb      	str	r3, [r7, #24]
 8003856:	61fa      	str	r2, [r7, #28]
 8003858:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800385c:	f7fd f928 	bl	8000ab0 <__aeabi_uldivmod>
 8003860:	4602      	mov	r2, r0
 8003862:	460b      	mov	r3, r1
 8003864:	4613      	mov	r3, r2
 8003866:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003868:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <HAL_RCC_GetSysClockFreq+0x200>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	0c1b      	lsrs	r3, r3, #16
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	3301      	adds	r3, #1
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003878:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800387a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800387c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003880:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003882:	e002      	b.n	800388a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <HAL_RCC_GetSysClockFreq+0x204>)
 8003886:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003888:	bf00      	nop
    }
  }
  return sysclockfreq;
 800388a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800388c:	4618      	mov	r0, r3
 800388e:	3750      	adds	r7, #80	; 0x50
 8003890:	46bd      	mov	sp, r7
 8003892:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003896:	bf00      	nop
 8003898:	40023800 	.word	0x40023800
 800389c:	00f42400 	.word	0x00f42400
 80038a0:	007a1200 	.word	0x007a1200

080038a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038a8:	4b03      	ldr	r3, [pc, #12]	; (80038b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80038aa:	681b      	ldr	r3, [r3, #0]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	20000090 	.word	0x20000090

080038bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038c0:	f7ff fff0 	bl	80038a4 <HAL_RCC_GetHCLKFreq>
 80038c4:	4602      	mov	r2, r0
 80038c6:	4b05      	ldr	r3, [pc, #20]	; (80038dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	0a9b      	lsrs	r3, r3, #10
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	4903      	ldr	r1, [pc, #12]	; (80038e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038d2:	5ccb      	ldrb	r3, [r1, r3]
 80038d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d8:	4618      	mov	r0, r3
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	40023800 	.word	0x40023800
 80038e0:	080047c8 	.word	0x080047c8

080038e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038e8:	f7ff ffdc 	bl	80038a4 <HAL_RCC_GetHCLKFreq>
 80038ec:	4602      	mov	r2, r0
 80038ee:	4b05      	ldr	r3, [pc, #20]	; (8003904 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	0b5b      	lsrs	r3, r3, #13
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	4903      	ldr	r1, [pc, #12]	; (8003908 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038fa:	5ccb      	ldrb	r3, [r1, r3]
 80038fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003900:	4618      	mov	r0, r3
 8003902:	bd80      	pop	{r7, pc}
 8003904:	40023800 	.word	0x40023800
 8003908:	080047c8 	.word	0x080047c8

0800390c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e03f      	b.n	800399e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d106      	bne.n	8003938 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7fd ffca 	bl	80018cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2224      	movs	r2, #36	; 0x24
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800394e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f929 	bl	8003ba8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003964:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	695a      	ldr	r2, [r3, #20]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003974:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003984:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2220      	movs	r2, #32
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b08a      	sub	sp, #40	; 0x28
 80039aa:	af02      	add	r7, sp, #8
 80039ac:	60f8      	str	r0, [r7, #12]
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	603b      	str	r3, [r7, #0]
 80039b2:	4613      	mov	r3, r2
 80039b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b20      	cmp	r3, #32
 80039c4:	d17c      	bne.n	8003ac0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d002      	beq.n	80039d2 <HAL_UART_Transmit+0x2c>
 80039cc:	88fb      	ldrh	r3, [r7, #6]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e075      	b.n	8003ac2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <HAL_UART_Transmit+0x3e>
 80039e0:	2302      	movs	r3, #2
 80039e2:	e06e      	b.n	8003ac2 <HAL_UART_Transmit+0x11c>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2221      	movs	r2, #33	; 0x21
 80039f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039fa:	f7fe f87b 	bl	8001af4 <HAL_GetTick>
 80039fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	88fa      	ldrh	r2, [r7, #6]
 8003a04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	88fa      	ldrh	r2, [r7, #6]
 8003a0a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a14:	d108      	bne.n	8003a28 <HAL_UART_Transmit+0x82>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d104      	bne.n	8003a28 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	61bb      	str	r3, [r7, #24]
 8003a26:	e003      	b.n	8003a30 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a38:	e02a      	b.n	8003a90 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2200      	movs	r2, #0
 8003a42:	2180      	movs	r1, #128	; 0x80
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f000 f840 	bl	8003aca <UART_WaitOnFlagUntilTimeout>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e036      	b.n	8003ac2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10b      	bne.n	8003a72 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	881b      	ldrh	r3, [r3, #0]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	3302      	adds	r3, #2
 8003a6e:	61bb      	str	r3, [r7, #24]
 8003a70:	e007      	b.n	8003a82 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	781a      	ldrb	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1cf      	bne.n	8003a3a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	2140      	movs	r1, #64	; 0x40
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 f810 	bl	8003aca <UART_WaitOnFlagUntilTimeout>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e006      	b.n	8003ac2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003abc:	2300      	movs	r3, #0
 8003abe:	e000      	b.n	8003ac2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ac0:	2302      	movs	r3, #2
  }
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3720      	adds	r7, #32
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b090      	sub	sp, #64	; 0x40
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	60f8      	str	r0, [r7, #12]
 8003ad2:	60b9      	str	r1, [r7, #8]
 8003ad4:	603b      	str	r3, [r7, #0]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ada:	e050      	b.n	8003b7e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae2:	d04c      	beq.n	8003b7e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d007      	beq.n	8003afa <UART_WaitOnFlagUntilTimeout+0x30>
 8003aea:	f7fe f803 	bl	8001af4 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d241      	bcs.n	8003b7e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	330c      	adds	r3, #12
 8003b00:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b04:	e853 3f00 	ldrex	r3, [r3]
 8003b08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	330c      	adds	r3, #12
 8003b18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b1a:	637a      	str	r2, [r7, #52]	; 0x34
 8003b1c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b22:	e841 2300 	strex	r3, r2, [r1]
 8003b26:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1e5      	bne.n	8003afa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	3314      	adds	r3, #20
 8003b34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	e853 3f00 	ldrex	r3, [r3]
 8003b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f023 0301 	bic.w	r3, r3, #1
 8003b44:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	3314      	adds	r3, #20
 8003b4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b4e:	623a      	str	r2, [r7, #32]
 8003b50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b52:	69f9      	ldr	r1, [r7, #28]
 8003b54:	6a3a      	ldr	r2, [r7, #32]
 8003b56:	e841 2300 	strex	r3, r2, [r1]
 8003b5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1e5      	bne.n	8003b2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2220      	movs	r2, #32
 8003b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e00f      	b.n	8003b9e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	4013      	ands	r3, r2
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	bf0c      	ite	eq
 8003b8e:	2301      	moveq	r3, #1
 8003b90:	2300      	movne	r3, #0
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	461a      	mov	r2, r3
 8003b96:	79fb      	ldrb	r3, [r7, #7]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d09f      	beq.n	8003adc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3740      	adds	r7, #64	; 0x40
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
	...

08003ba8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bac:	b0c0      	sub	sp, #256	; 0x100
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc4:	68d9      	ldr	r1, [r3, #12]
 8003bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	ea40 0301 	orr.w	r3, r0, r1
 8003bd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	431a      	orrs	r2, r3
 8003be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	431a      	orrs	r2, r3
 8003be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c00:	f021 010c 	bic.w	r1, r1, #12
 8003c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c0e:	430b      	orrs	r3, r1
 8003c10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c22:	6999      	ldr	r1, [r3, #24]
 8003c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	ea40 0301 	orr.w	r3, r0, r1
 8003c2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	4b8f      	ldr	r3, [pc, #572]	; (8003e74 <UART_SetConfig+0x2cc>)
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d005      	beq.n	8003c48 <UART_SetConfig+0xa0>
 8003c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	4b8d      	ldr	r3, [pc, #564]	; (8003e78 <UART_SetConfig+0x2d0>)
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d104      	bne.n	8003c52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c48:	f7ff fe4c 	bl	80038e4 <HAL_RCC_GetPCLK2Freq>
 8003c4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003c50:	e003      	b.n	8003c5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c52:	f7ff fe33 	bl	80038bc <HAL_RCC_GetPCLK1Freq>
 8003c56:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c64:	f040 810c 	bne.w	8003e80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c72:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c7a:	4622      	mov	r2, r4
 8003c7c:	462b      	mov	r3, r5
 8003c7e:	1891      	adds	r1, r2, r2
 8003c80:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c82:	415b      	adcs	r3, r3
 8003c84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c8a:	4621      	mov	r1, r4
 8003c8c:	eb12 0801 	adds.w	r8, r2, r1
 8003c90:	4629      	mov	r1, r5
 8003c92:	eb43 0901 	adc.w	r9, r3, r1
 8003c96:	f04f 0200 	mov.w	r2, #0
 8003c9a:	f04f 0300 	mov.w	r3, #0
 8003c9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ca2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ca6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003caa:	4690      	mov	r8, r2
 8003cac:	4699      	mov	r9, r3
 8003cae:	4623      	mov	r3, r4
 8003cb0:	eb18 0303 	adds.w	r3, r8, r3
 8003cb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003cb8:	462b      	mov	r3, r5
 8003cba:	eb49 0303 	adc.w	r3, r9, r3
 8003cbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003cce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003cd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	18db      	adds	r3, r3, r3
 8003cda:	653b      	str	r3, [r7, #80]	; 0x50
 8003cdc:	4613      	mov	r3, r2
 8003cde:	eb42 0303 	adc.w	r3, r2, r3
 8003ce2:	657b      	str	r3, [r7, #84]	; 0x54
 8003ce4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ce8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003cec:	f7fc fee0 	bl	8000ab0 <__aeabi_uldivmod>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4b61      	ldr	r3, [pc, #388]	; (8003e7c <UART_SetConfig+0x2d4>)
 8003cf6:	fba3 2302 	umull	r2, r3, r3, r2
 8003cfa:	095b      	lsrs	r3, r3, #5
 8003cfc:	011c      	lsls	r4, r3, #4
 8003cfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d02:	2200      	movs	r2, #0
 8003d04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d08:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d10:	4642      	mov	r2, r8
 8003d12:	464b      	mov	r3, r9
 8003d14:	1891      	adds	r1, r2, r2
 8003d16:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d18:	415b      	adcs	r3, r3
 8003d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d20:	4641      	mov	r1, r8
 8003d22:	eb12 0a01 	adds.w	sl, r2, r1
 8003d26:	4649      	mov	r1, r9
 8003d28:	eb43 0b01 	adc.w	fp, r3, r1
 8003d2c:	f04f 0200 	mov.w	r2, #0
 8003d30:	f04f 0300 	mov.w	r3, #0
 8003d34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d40:	4692      	mov	sl, r2
 8003d42:	469b      	mov	fp, r3
 8003d44:	4643      	mov	r3, r8
 8003d46:	eb1a 0303 	adds.w	r3, sl, r3
 8003d4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d4e:	464b      	mov	r3, r9
 8003d50:	eb4b 0303 	adc.w	r3, fp, r3
 8003d54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d64:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	18db      	adds	r3, r3, r3
 8003d70:	643b      	str	r3, [r7, #64]	; 0x40
 8003d72:	4613      	mov	r3, r2
 8003d74:	eb42 0303 	adc.w	r3, r2, r3
 8003d78:	647b      	str	r3, [r7, #68]	; 0x44
 8003d7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d82:	f7fc fe95 	bl	8000ab0 <__aeabi_uldivmod>
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4611      	mov	r1, r2
 8003d8c:	4b3b      	ldr	r3, [pc, #236]	; (8003e7c <UART_SetConfig+0x2d4>)
 8003d8e:	fba3 2301 	umull	r2, r3, r3, r1
 8003d92:	095b      	lsrs	r3, r3, #5
 8003d94:	2264      	movs	r2, #100	; 0x64
 8003d96:	fb02 f303 	mul.w	r3, r2, r3
 8003d9a:	1acb      	subs	r3, r1, r3
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003da2:	4b36      	ldr	r3, [pc, #216]	; (8003e7c <UART_SetConfig+0x2d4>)
 8003da4:	fba3 2302 	umull	r2, r3, r3, r2
 8003da8:	095b      	lsrs	r3, r3, #5
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003db0:	441c      	add	r4, r3
 8003db2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003db6:	2200      	movs	r2, #0
 8003db8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003dbc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003dc0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003dc4:	4642      	mov	r2, r8
 8003dc6:	464b      	mov	r3, r9
 8003dc8:	1891      	adds	r1, r2, r2
 8003dca:	63b9      	str	r1, [r7, #56]	; 0x38
 8003dcc:	415b      	adcs	r3, r3
 8003dce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003dd4:	4641      	mov	r1, r8
 8003dd6:	1851      	adds	r1, r2, r1
 8003dd8:	6339      	str	r1, [r7, #48]	; 0x30
 8003dda:	4649      	mov	r1, r9
 8003ddc:	414b      	adcs	r3, r1
 8003dde:	637b      	str	r3, [r7, #52]	; 0x34
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	f04f 0300 	mov.w	r3, #0
 8003de8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003dec:	4659      	mov	r1, fp
 8003dee:	00cb      	lsls	r3, r1, #3
 8003df0:	4651      	mov	r1, sl
 8003df2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003df6:	4651      	mov	r1, sl
 8003df8:	00ca      	lsls	r2, r1, #3
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4603      	mov	r3, r0
 8003e00:	4642      	mov	r2, r8
 8003e02:	189b      	adds	r3, r3, r2
 8003e04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e08:	464b      	mov	r3, r9
 8003e0a:	460a      	mov	r2, r1
 8003e0c:	eb42 0303 	adc.w	r3, r2, r3
 8003e10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e20:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e28:	460b      	mov	r3, r1
 8003e2a:	18db      	adds	r3, r3, r3
 8003e2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e2e:	4613      	mov	r3, r2
 8003e30:	eb42 0303 	adc.w	r3, r2, r3
 8003e34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003e3e:	f7fc fe37 	bl	8000ab0 <__aeabi_uldivmod>
 8003e42:	4602      	mov	r2, r0
 8003e44:	460b      	mov	r3, r1
 8003e46:	4b0d      	ldr	r3, [pc, #52]	; (8003e7c <UART_SetConfig+0x2d4>)
 8003e48:	fba3 1302 	umull	r1, r3, r3, r2
 8003e4c:	095b      	lsrs	r3, r3, #5
 8003e4e:	2164      	movs	r1, #100	; 0x64
 8003e50:	fb01 f303 	mul.w	r3, r1, r3
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	3332      	adds	r3, #50	; 0x32
 8003e5a:	4a08      	ldr	r2, [pc, #32]	; (8003e7c <UART_SetConfig+0x2d4>)
 8003e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e60:	095b      	lsrs	r3, r3, #5
 8003e62:	f003 0207 	and.w	r2, r3, #7
 8003e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4422      	add	r2, r4
 8003e6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e70:	e105      	b.n	800407e <UART_SetConfig+0x4d6>
 8003e72:	bf00      	nop
 8003e74:	40011000 	.word	0x40011000
 8003e78:	40011400 	.word	0x40011400
 8003e7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e84:	2200      	movs	r2, #0
 8003e86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e8a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003e8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003e92:	4642      	mov	r2, r8
 8003e94:	464b      	mov	r3, r9
 8003e96:	1891      	adds	r1, r2, r2
 8003e98:	6239      	str	r1, [r7, #32]
 8003e9a:	415b      	adcs	r3, r3
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ea2:	4641      	mov	r1, r8
 8003ea4:	1854      	adds	r4, r2, r1
 8003ea6:	4649      	mov	r1, r9
 8003ea8:	eb43 0501 	adc.w	r5, r3, r1
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	f04f 0300 	mov.w	r3, #0
 8003eb4:	00eb      	lsls	r3, r5, #3
 8003eb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eba:	00e2      	lsls	r2, r4, #3
 8003ebc:	4614      	mov	r4, r2
 8003ebe:	461d      	mov	r5, r3
 8003ec0:	4643      	mov	r3, r8
 8003ec2:	18e3      	adds	r3, r4, r3
 8003ec4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ec8:	464b      	mov	r3, r9
 8003eca:	eb45 0303 	adc.w	r3, r5, r3
 8003ece:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ede:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ee2:	f04f 0200 	mov.w	r2, #0
 8003ee6:	f04f 0300 	mov.w	r3, #0
 8003eea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003eee:	4629      	mov	r1, r5
 8003ef0:	008b      	lsls	r3, r1, #2
 8003ef2:	4621      	mov	r1, r4
 8003ef4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ef8:	4621      	mov	r1, r4
 8003efa:	008a      	lsls	r2, r1, #2
 8003efc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003f00:	f7fc fdd6 	bl	8000ab0 <__aeabi_uldivmod>
 8003f04:	4602      	mov	r2, r0
 8003f06:	460b      	mov	r3, r1
 8003f08:	4b60      	ldr	r3, [pc, #384]	; (800408c <UART_SetConfig+0x4e4>)
 8003f0a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f0e:	095b      	lsrs	r3, r3, #5
 8003f10:	011c      	lsls	r4, r3, #4
 8003f12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f16:	2200      	movs	r2, #0
 8003f18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f1c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003f24:	4642      	mov	r2, r8
 8003f26:	464b      	mov	r3, r9
 8003f28:	1891      	adds	r1, r2, r2
 8003f2a:	61b9      	str	r1, [r7, #24]
 8003f2c:	415b      	adcs	r3, r3
 8003f2e:	61fb      	str	r3, [r7, #28]
 8003f30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f34:	4641      	mov	r1, r8
 8003f36:	1851      	adds	r1, r2, r1
 8003f38:	6139      	str	r1, [r7, #16]
 8003f3a:	4649      	mov	r1, r9
 8003f3c:	414b      	adcs	r3, r1
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	f04f 0200 	mov.w	r2, #0
 8003f44:	f04f 0300 	mov.w	r3, #0
 8003f48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f4c:	4659      	mov	r1, fp
 8003f4e:	00cb      	lsls	r3, r1, #3
 8003f50:	4651      	mov	r1, sl
 8003f52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f56:	4651      	mov	r1, sl
 8003f58:	00ca      	lsls	r2, r1, #3
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4603      	mov	r3, r0
 8003f60:	4642      	mov	r2, r8
 8003f62:	189b      	adds	r3, r3, r2
 8003f64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f68:	464b      	mov	r3, r9
 8003f6a:	460a      	mov	r2, r1
 8003f6c:	eb42 0303 	adc.w	r3, r2, r3
 8003f70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f7e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f80:	f04f 0200 	mov.w	r2, #0
 8003f84:	f04f 0300 	mov.w	r3, #0
 8003f88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003f8c:	4649      	mov	r1, r9
 8003f8e:	008b      	lsls	r3, r1, #2
 8003f90:	4641      	mov	r1, r8
 8003f92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f96:	4641      	mov	r1, r8
 8003f98:	008a      	lsls	r2, r1, #2
 8003f9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003f9e:	f7fc fd87 	bl	8000ab0 <__aeabi_uldivmod>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	4b39      	ldr	r3, [pc, #228]	; (800408c <UART_SetConfig+0x4e4>)
 8003fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8003fac:	095b      	lsrs	r3, r3, #5
 8003fae:	2164      	movs	r1, #100	; 0x64
 8003fb0:	fb01 f303 	mul.w	r3, r1, r3
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	3332      	adds	r3, #50	; 0x32
 8003fba:	4a34      	ldr	r2, [pc, #208]	; (800408c <UART_SetConfig+0x4e4>)
 8003fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc0:	095b      	lsrs	r3, r3, #5
 8003fc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fc6:	441c      	add	r4, r3
 8003fc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fcc:	2200      	movs	r2, #0
 8003fce:	673b      	str	r3, [r7, #112]	; 0x70
 8003fd0:	677a      	str	r2, [r7, #116]	; 0x74
 8003fd2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003fd6:	4642      	mov	r2, r8
 8003fd8:	464b      	mov	r3, r9
 8003fda:	1891      	adds	r1, r2, r2
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	415b      	adcs	r3, r3
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fe6:	4641      	mov	r1, r8
 8003fe8:	1851      	adds	r1, r2, r1
 8003fea:	6039      	str	r1, [r7, #0]
 8003fec:	4649      	mov	r1, r9
 8003fee:	414b      	adcs	r3, r1
 8003ff0:	607b      	str	r3, [r7, #4]
 8003ff2:	f04f 0200 	mov.w	r2, #0
 8003ff6:	f04f 0300 	mov.w	r3, #0
 8003ffa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ffe:	4659      	mov	r1, fp
 8004000:	00cb      	lsls	r3, r1, #3
 8004002:	4651      	mov	r1, sl
 8004004:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004008:	4651      	mov	r1, sl
 800400a:	00ca      	lsls	r2, r1, #3
 800400c:	4610      	mov	r0, r2
 800400e:	4619      	mov	r1, r3
 8004010:	4603      	mov	r3, r0
 8004012:	4642      	mov	r2, r8
 8004014:	189b      	adds	r3, r3, r2
 8004016:	66bb      	str	r3, [r7, #104]	; 0x68
 8004018:	464b      	mov	r3, r9
 800401a:	460a      	mov	r2, r1
 800401c:	eb42 0303 	adc.w	r3, r2, r3
 8004020:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	663b      	str	r3, [r7, #96]	; 0x60
 800402c:	667a      	str	r2, [r7, #100]	; 0x64
 800402e:	f04f 0200 	mov.w	r2, #0
 8004032:	f04f 0300 	mov.w	r3, #0
 8004036:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800403a:	4649      	mov	r1, r9
 800403c:	008b      	lsls	r3, r1, #2
 800403e:	4641      	mov	r1, r8
 8004040:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004044:	4641      	mov	r1, r8
 8004046:	008a      	lsls	r2, r1, #2
 8004048:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800404c:	f7fc fd30 	bl	8000ab0 <__aeabi_uldivmod>
 8004050:	4602      	mov	r2, r0
 8004052:	460b      	mov	r3, r1
 8004054:	4b0d      	ldr	r3, [pc, #52]	; (800408c <UART_SetConfig+0x4e4>)
 8004056:	fba3 1302 	umull	r1, r3, r3, r2
 800405a:	095b      	lsrs	r3, r3, #5
 800405c:	2164      	movs	r1, #100	; 0x64
 800405e:	fb01 f303 	mul.w	r3, r1, r3
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	011b      	lsls	r3, r3, #4
 8004066:	3332      	adds	r3, #50	; 0x32
 8004068:	4a08      	ldr	r2, [pc, #32]	; (800408c <UART_SetConfig+0x4e4>)
 800406a:	fba2 2303 	umull	r2, r3, r2, r3
 800406e:	095b      	lsrs	r3, r3, #5
 8004070:	f003 020f 	and.w	r2, r3, #15
 8004074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4422      	add	r2, r4
 800407c:	609a      	str	r2, [r3, #8]
}
 800407e:	bf00      	nop
 8004080:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004084:	46bd      	mov	sp, r7
 8004086:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800408a:	bf00      	nop
 800408c:	51eb851f 	.word	0x51eb851f

08004090 <atan>:
 8004090:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004094:	ec55 4b10 	vmov	r4, r5, d0
 8004098:	4bc3      	ldr	r3, [pc, #780]	; (80043a8 <atan+0x318>)
 800409a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800409e:	429e      	cmp	r6, r3
 80040a0:	46ab      	mov	fp, r5
 80040a2:	dd18      	ble.n	80040d6 <atan+0x46>
 80040a4:	4bc1      	ldr	r3, [pc, #772]	; (80043ac <atan+0x31c>)
 80040a6:	429e      	cmp	r6, r3
 80040a8:	dc01      	bgt.n	80040ae <atan+0x1e>
 80040aa:	d109      	bne.n	80040c0 <atan+0x30>
 80040ac:	b144      	cbz	r4, 80040c0 <atan+0x30>
 80040ae:	4622      	mov	r2, r4
 80040b0:	462b      	mov	r3, r5
 80040b2:	4620      	mov	r0, r4
 80040b4:	4629      	mov	r1, r5
 80040b6:	f7fc f895 	bl	80001e4 <__adddf3>
 80040ba:	4604      	mov	r4, r0
 80040bc:	460d      	mov	r5, r1
 80040be:	e006      	b.n	80040ce <atan+0x3e>
 80040c0:	f1bb 0f00 	cmp.w	fp, #0
 80040c4:	f300 8131 	bgt.w	800432a <atan+0x29a>
 80040c8:	a59b      	add	r5, pc, #620	; (adr r5, 8004338 <atan+0x2a8>)
 80040ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 80040ce:	ec45 4b10 	vmov	d0, r4, r5
 80040d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040d6:	4bb6      	ldr	r3, [pc, #728]	; (80043b0 <atan+0x320>)
 80040d8:	429e      	cmp	r6, r3
 80040da:	dc14      	bgt.n	8004106 <atan+0x76>
 80040dc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80040e0:	429e      	cmp	r6, r3
 80040e2:	dc0d      	bgt.n	8004100 <atan+0x70>
 80040e4:	a396      	add	r3, pc, #600	; (adr r3, 8004340 <atan+0x2b0>)
 80040e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ea:	ee10 0a10 	vmov	r0, s0
 80040ee:	4629      	mov	r1, r5
 80040f0:	f7fc f878 	bl	80001e4 <__adddf3>
 80040f4:	4baf      	ldr	r3, [pc, #700]	; (80043b4 <atan+0x324>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	f7fc fcba 	bl	8000a70 <__aeabi_dcmpgt>
 80040fc:	2800      	cmp	r0, #0
 80040fe:	d1e6      	bne.n	80040ce <atan+0x3e>
 8004100:	f04f 3aff 	mov.w	sl, #4294967295
 8004104:	e02b      	b.n	800415e <atan+0xce>
 8004106:	f000 f963 	bl	80043d0 <fabs>
 800410a:	4bab      	ldr	r3, [pc, #684]	; (80043b8 <atan+0x328>)
 800410c:	429e      	cmp	r6, r3
 800410e:	ec55 4b10 	vmov	r4, r5, d0
 8004112:	f300 80bf 	bgt.w	8004294 <atan+0x204>
 8004116:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800411a:	429e      	cmp	r6, r3
 800411c:	f300 80a0 	bgt.w	8004260 <atan+0x1d0>
 8004120:	ee10 2a10 	vmov	r2, s0
 8004124:	ee10 0a10 	vmov	r0, s0
 8004128:	462b      	mov	r3, r5
 800412a:	4629      	mov	r1, r5
 800412c:	f7fc f85a 	bl	80001e4 <__adddf3>
 8004130:	4ba0      	ldr	r3, [pc, #640]	; (80043b4 <atan+0x324>)
 8004132:	2200      	movs	r2, #0
 8004134:	f7fc f854 	bl	80001e0 <__aeabi_dsub>
 8004138:	2200      	movs	r2, #0
 800413a:	4606      	mov	r6, r0
 800413c:	460f      	mov	r7, r1
 800413e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004142:	4620      	mov	r0, r4
 8004144:	4629      	mov	r1, r5
 8004146:	f7fc f84d 	bl	80001e4 <__adddf3>
 800414a:	4602      	mov	r2, r0
 800414c:	460b      	mov	r3, r1
 800414e:	4630      	mov	r0, r6
 8004150:	4639      	mov	r1, r7
 8004152:	f7fc fb27 	bl	80007a4 <__aeabi_ddiv>
 8004156:	f04f 0a00 	mov.w	sl, #0
 800415a:	4604      	mov	r4, r0
 800415c:	460d      	mov	r5, r1
 800415e:	4622      	mov	r2, r4
 8004160:	462b      	mov	r3, r5
 8004162:	4620      	mov	r0, r4
 8004164:	4629      	mov	r1, r5
 8004166:	f7fc f9f3 	bl	8000550 <__aeabi_dmul>
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	4680      	mov	r8, r0
 8004170:	4689      	mov	r9, r1
 8004172:	f7fc f9ed 	bl	8000550 <__aeabi_dmul>
 8004176:	a374      	add	r3, pc, #464	; (adr r3, 8004348 <atan+0x2b8>)
 8004178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417c:	4606      	mov	r6, r0
 800417e:	460f      	mov	r7, r1
 8004180:	f7fc f9e6 	bl	8000550 <__aeabi_dmul>
 8004184:	a372      	add	r3, pc, #456	; (adr r3, 8004350 <atan+0x2c0>)
 8004186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418a:	f7fc f82b 	bl	80001e4 <__adddf3>
 800418e:	4632      	mov	r2, r6
 8004190:	463b      	mov	r3, r7
 8004192:	f7fc f9dd 	bl	8000550 <__aeabi_dmul>
 8004196:	a370      	add	r3, pc, #448	; (adr r3, 8004358 <atan+0x2c8>)
 8004198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419c:	f7fc f822 	bl	80001e4 <__adddf3>
 80041a0:	4632      	mov	r2, r6
 80041a2:	463b      	mov	r3, r7
 80041a4:	f7fc f9d4 	bl	8000550 <__aeabi_dmul>
 80041a8:	a36d      	add	r3, pc, #436	; (adr r3, 8004360 <atan+0x2d0>)
 80041aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ae:	f7fc f819 	bl	80001e4 <__adddf3>
 80041b2:	4632      	mov	r2, r6
 80041b4:	463b      	mov	r3, r7
 80041b6:	f7fc f9cb 	bl	8000550 <__aeabi_dmul>
 80041ba:	a36b      	add	r3, pc, #428	; (adr r3, 8004368 <atan+0x2d8>)
 80041bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c0:	f7fc f810 	bl	80001e4 <__adddf3>
 80041c4:	4632      	mov	r2, r6
 80041c6:	463b      	mov	r3, r7
 80041c8:	f7fc f9c2 	bl	8000550 <__aeabi_dmul>
 80041cc:	a368      	add	r3, pc, #416	; (adr r3, 8004370 <atan+0x2e0>)
 80041ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d2:	f7fc f807 	bl	80001e4 <__adddf3>
 80041d6:	4642      	mov	r2, r8
 80041d8:	464b      	mov	r3, r9
 80041da:	f7fc f9b9 	bl	8000550 <__aeabi_dmul>
 80041de:	a366      	add	r3, pc, #408	; (adr r3, 8004378 <atan+0x2e8>)
 80041e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e4:	4680      	mov	r8, r0
 80041e6:	4689      	mov	r9, r1
 80041e8:	4630      	mov	r0, r6
 80041ea:	4639      	mov	r1, r7
 80041ec:	f7fc f9b0 	bl	8000550 <__aeabi_dmul>
 80041f0:	a363      	add	r3, pc, #396	; (adr r3, 8004380 <atan+0x2f0>)
 80041f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f6:	f7fb fff3 	bl	80001e0 <__aeabi_dsub>
 80041fa:	4632      	mov	r2, r6
 80041fc:	463b      	mov	r3, r7
 80041fe:	f7fc f9a7 	bl	8000550 <__aeabi_dmul>
 8004202:	a361      	add	r3, pc, #388	; (adr r3, 8004388 <atan+0x2f8>)
 8004204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004208:	f7fb ffea 	bl	80001e0 <__aeabi_dsub>
 800420c:	4632      	mov	r2, r6
 800420e:	463b      	mov	r3, r7
 8004210:	f7fc f99e 	bl	8000550 <__aeabi_dmul>
 8004214:	a35e      	add	r3, pc, #376	; (adr r3, 8004390 <atan+0x300>)
 8004216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421a:	f7fb ffe1 	bl	80001e0 <__aeabi_dsub>
 800421e:	4632      	mov	r2, r6
 8004220:	463b      	mov	r3, r7
 8004222:	f7fc f995 	bl	8000550 <__aeabi_dmul>
 8004226:	a35c      	add	r3, pc, #368	; (adr r3, 8004398 <atan+0x308>)
 8004228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422c:	f7fb ffd8 	bl	80001e0 <__aeabi_dsub>
 8004230:	4632      	mov	r2, r6
 8004232:	463b      	mov	r3, r7
 8004234:	f7fc f98c 	bl	8000550 <__aeabi_dmul>
 8004238:	4602      	mov	r2, r0
 800423a:	460b      	mov	r3, r1
 800423c:	4640      	mov	r0, r8
 800423e:	4649      	mov	r1, r9
 8004240:	f7fb ffd0 	bl	80001e4 <__adddf3>
 8004244:	4622      	mov	r2, r4
 8004246:	462b      	mov	r3, r5
 8004248:	f7fc f982 	bl	8000550 <__aeabi_dmul>
 800424c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004250:	4602      	mov	r2, r0
 8004252:	460b      	mov	r3, r1
 8004254:	d14b      	bne.n	80042ee <atan+0x25e>
 8004256:	4620      	mov	r0, r4
 8004258:	4629      	mov	r1, r5
 800425a:	f7fb ffc1 	bl	80001e0 <__aeabi_dsub>
 800425e:	e72c      	b.n	80040ba <atan+0x2a>
 8004260:	ee10 0a10 	vmov	r0, s0
 8004264:	4b53      	ldr	r3, [pc, #332]	; (80043b4 <atan+0x324>)
 8004266:	2200      	movs	r2, #0
 8004268:	4629      	mov	r1, r5
 800426a:	f7fb ffb9 	bl	80001e0 <__aeabi_dsub>
 800426e:	4b51      	ldr	r3, [pc, #324]	; (80043b4 <atan+0x324>)
 8004270:	4606      	mov	r6, r0
 8004272:	460f      	mov	r7, r1
 8004274:	2200      	movs	r2, #0
 8004276:	4620      	mov	r0, r4
 8004278:	4629      	mov	r1, r5
 800427a:	f7fb ffb3 	bl	80001e4 <__adddf3>
 800427e:	4602      	mov	r2, r0
 8004280:	460b      	mov	r3, r1
 8004282:	4630      	mov	r0, r6
 8004284:	4639      	mov	r1, r7
 8004286:	f7fc fa8d 	bl	80007a4 <__aeabi_ddiv>
 800428a:	f04f 0a01 	mov.w	sl, #1
 800428e:	4604      	mov	r4, r0
 8004290:	460d      	mov	r5, r1
 8004292:	e764      	b.n	800415e <atan+0xce>
 8004294:	4b49      	ldr	r3, [pc, #292]	; (80043bc <atan+0x32c>)
 8004296:	429e      	cmp	r6, r3
 8004298:	da1d      	bge.n	80042d6 <atan+0x246>
 800429a:	ee10 0a10 	vmov	r0, s0
 800429e:	4b48      	ldr	r3, [pc, #288]	; (80043c0 <atan+0x330>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	4629      	mov	r1, r5
 80042a4:	f7fb ff9c 	bl	80001e0 <__aeabi_dsub>
 80042a8:	4b45      	ldr	r3, [pc, #276]	; (80043c0 <atan+0x330>)
 80042aa:	4606      	mov	r6, r0
 80042ac:	460f      	mov	r7, r1
 80042ae:	2200      	movs	r2, #0
 80042b0:	4620      	mov	r0, r4
 80042b2:	4629      	mov	r1, r5
 80042b4:	f7fc f94c 	bl	8000550 <__aeabi_dmul>
 80042b8:	4b3e      	ldr	r3, [pc, #248]	; (80043b4 <atan+0x324>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	f7fb ff92 	bl	80001e4 <__adddf3>
 80042c0:	4602      	mov	r2, r0
 80042c2:	460b      	mov	r3, r1
 80042c4:	4630      	mov	r0, r6
 80042c6:	4639      	mov	r1, r7
 80042c8:	f7fc fa6c 	bl	80007a4 <__aeabi_ddiv>
 80042cc:	f04f 0a02 	mov.w	sl, #2
 80042d0:	4604      	mov	r4, r0
 80042d2:	460d      	mov	r5, r1
 80042d4:	e743      	b.n	800415e <atan+0xce>
 80042d6:	462b      	mov	r3, r5
 80042d8:	ee10 2a10 	vmov	r2, s0
 80042dc:	4939      	ldr	r1, [pc, #228]	; (80043c4 <atan+0x334>)
 80042de:	2000      	movs	r0, #0
 80042e0:	f7fc fa60 	bl	80007a4 <__aeabi_ddiv>
 80042e4:	f04f 0a03 	mov.w	sl, #3
 80042e8:	4604      	mov	r4, r0
 80042ea:	460d      	mov	r5, r1
 80042ec:	e737      	b.n	800415e <atan+0xce>
 80042ee:	4b36      	ldr	r3, [pc, #216]	; (80043c8 <atan+0x338>)
 80042f0:	4e36      	ldr	r6, [pc, #216]	; (80043cc <atan+0x33c>)
 80042f2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80042f6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80042fa:	e9da 2300 	ldrd	r2, r3, [sl]
 80042fe:	f7fb ff6f 	bl	80001e0 <__aeabi_dsub>
 8004302:	4622      	mov	r2, r4
 8004304:	462b      	mov	r3, r5
 8004306:	f7fb ff6b 	bl	80001e0 <__aeabi_dsub>
 800430a:	4602      	mov	r2, r0
 800430c:	460b      	mov	r3, r1
 800430e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8004312:	f7fb ff65 	bl	80001e0 <__aeabi_dsub>
 8004316:	f1bb 0f00 	cmp.w	fp, #0
 800431a:	4604      	mov	r4, r0
 800431c:	460d      	mov	r5, r1
 800431e:	f6bf aed6 	bge.w	80040ce <atan+0x3e>
 8004322:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004326:	461d      	mov	r5, r3
 8004328:	e6d1      	b.n	80040ce <atan+0x3e>
 800432a:	a51d      	add	r5, pc, #116	; (adr r5, 80043a0 <atan+0x310>)
 800432c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004330:	e6cd      	b.n	80040ce <atan+0x3e>
 8004332:	bf00      	nop
 8004334:	f3af 8000 	nop.w
 8004338:	54442d18 	.word	0x54442d18
 800433c:	bff921fb 	.word	0xbff921fb
 8004340:	8800759c 	.word	0x8800759c
 8004344:	7e37e43c 	.word	0x7e37e43c
 8004348:	e322da11 	.word	0xe322da11
 800434c:	3f90ad3a 	.word	0x3f90ad3a
 8004350:	24760deb 	.word	0x24760deb
 8004354:	3fa97b4b 	.word	0x3fa97b4b
 8004358:	a0d03d51 	.word	0xa0d03d51
 800435c:	3fb10d66 	.word	0x3fb10d66
 8004360:	c54c206e 	.word	0xc54c206e
 8004364:	3fb745cd 	.word	0x3fb745cd
 8004368:	920083ff 	.word	0x920083ff
 800436c:	3fc24924 	.word	0x3fc24924
 8004370:	5555550d 	.word	0x5555550d
 8004374:	3fd55555 	.word	0x3fd55555
 8004378:	2c6a6c2f 	.word	0x2c6a6c2f
 800437c:	bfa2b444 	.word	0xbfa2b444
 8004380:	52defd9a 	.word	0x52defd9a
 8004384:	3fadde2d 	.word	0x3fadde2d
 8004388:	af749a6d 	.word	0xaf749a6d
 800438c:	3fb3b0f2 	.word	0x3fb3b0f2
 8004390:	fe231671 	.word	0xfe231671
 8004394:	3fbc71c6 	.word	0x3fbc71c6
 8004398:	9998ebc4 	.word	0x9998ebc4
 800439c:	3fc99999 	.word	0x3fc99999
 80043a0:	54442d18 	.word	0x54442d18
 80043a4:	3ff921fb 	.word	0x3ff921fb
 80043a8:	440fffff 	.word	0x440fffff
 80043ac:	7ff00000 	.word	0x7ff00000
 80043b0:	3fdbffff 	.word	0x3fdbffff
 80043b4:	3ff00000 	.word	0x3ff00000
 80043b8:	3ff2ffff 	.word	0x3ff2ffff
 80043bc:	40038000 	.word	0x40038000
 80043c0:	3ff80000 	.word	0x3ff80000
 80043c4:	bff00000 	.word	0xbff00000
 80043c8:	080047f0 	.word	0x080047f0
 80043cc:	080047d0 	.word	0x080047d0

080043d0 <fabs>:
 80043d0:	ec51 0b10 	vmov	r0, r1, d0
 80043d4:	ee10 2a10 	vmov	r2, s0
 80043d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80043dc:	ec43 2b10 	vmov	d0, r2, r3
 80043e0:	4770      	bx	lr

080043e2 <atan2>:
 80043e2:	f000 b82d 	b.w	8004440 <__ieee754_atan2>

080043e6 <sqrt>:
 80043e6:	b538      	push	{r3, r4, r5, lr}
 80043e8:	ed2d 8b02 	vpush	{d8}
 80043ec:	ec55 4b10 	vmov	r4, r5, d0
 80043f0:	f000 f8f0 	bl	80045d4 <__ieee754_sqrt>
 80043f4:	4622      	mov	r2, r4
 80043f6:	462b      	mov	r3, r5
 80043f8:	4620      	mov	r0, r4
 80043fa:	4629      	mov	r1, r5
 80043fc:	eeb0 8a40 	vmov.f32	s16, s0
 8004400:	eef0 8a60 	vmov.f32	s17, s1
 8004404:	f7fc fb3e 	bl	8000a84 <__aeabi_dcmpun>
 8004408:	b990      	cbnz	r0, 8004430 <sqrt+0x4a>
 800440a:	2200      	movs	r2, #0
 800440c:	2300      	movs	r3, #0
 800440e:	4620      	mov	r0, r4
 8004410:	4629      	mov	r1, r5
 8004412:	f7fc fb0f 	bl	8000a34 <__aeabi_dcmplt>
 8004416:	b158      	cbz	r0, 8004430 <sqrt+0x4a>
 8004418:	f000 f98e 	bl	8004738 <__errno>
 800441c:	2321      	movs	r3, #33	; 0x21
 800441e:	6003      	str	r3, [r0, #0]
 8004420:	2200      	movs	r2, #0
 8004422:	2300      	movs	r3, #0
 8004424:	4610      	mov	r0, r2
 8004426:	4619      	mov	r1, r3
 8004428:	f7fc f9bc 	bl	80007a4 <__aeabi_ddiv>
 800442c:	ec41 0b18 	vmov	d8, r0, r1
 8004430:	eeb0 0a48 	vmov.f32	s0, s16
 8004434:	eef0 0a68 	vmov.f32	s1, s17
 8004438:	ecbd 8b02 	vpop	{d8}
 800443c:	bd38      	pop	{r3, r4, r5, pc}
	...

08004440 <__ieee754_atan2>:
 8004440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004444:	ec57 6b11 	vmov	r6, r7, d1
 8004448:	4273      	negs	r3, r6
 800444a:	f8df e184 	ldr.w	lr, [pc, #388]	; 80045d0 <__ieee754_atan2+0x190>
 800444e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8004452:	4333      	orrs	r3, r6
 8004454:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8004458:	4573      	cmp	r3, lr
 800445a:	ec51 0b10 	vmov	r0, r1, d0
 800445e:	ee11 8a10 	vmov	r8, s2
 8004462:	d80a      	bhi.n	800447a <__ieee754_atan2+0x3a>
 8004464:	4244      	negs	r4, r0
 8004466:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800446a:	4304      	orrs	r4, r0
 800446c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8004470:	4574      	cmp	r4, lr
 8004472:	ee10 9a10 	vmov	r9, s0
 8004476:	468c      	mov	ip, r1
 8004478:	d907      	bls.n	800448a <__ieee754_atan2+0x4a>
 800447a:	4632      	mov	r2, r6
 800447c:	463b      	mov	r3, r7
 800447e:	f7fb feb1 	bl	80001e4 <__adddf3>
 8004482:	ec41 0b10 	vmov	d0, r0, r1
 8004486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800448a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800448e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004492:	4334      	orrs	r4, r6
 8004494:	d103      	bne.n	800449e <__ieee754_atan2+0x5e>
 8004496:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800449a:	f7ff bdf9 	b.w	8004090 <atan>
 800449e:	17bc      	asrs	r4, r7, #30
 80044a0:	f004 0402 	and.w	r4, r4, #2
 80044a4:	ea53 0909 	orrs.w	r9, r3, r9
 80044a8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80044ac:	d107      	bne.n	80044be <__ieee754_atan2+0x7e>
 80044ae:	2c02      	cmp	r4, #2
 80044b0:	d060      	beq.n	8004574 <__ieee754_atan2+0x134>
 80044b2:	2c03      	cmp	r4, #3
 80044b4:	d1e5      	bne.n	8004482 <__ieee754_atan2+0x42>
 80044b6:	a142      	add	r1, pc, #264	; (adr r1, 80045c0 <__ieee754_atan2+0x180>)
 80044b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044bc:	e7e1      	b.n	8004482 <__ieee754_atan2+0x42>
 80044be:	ea52 0808 	orrs.w	r8, r2, r8
 80044c2:	d106      	bne.n	80044d2 <__ieee754_atan2+0x92>
 80044c4:	f1bc 0f00 	cmp.w	ip, #0
 80044c8:	da5f      	bge.n	800458a <__ieee754_atan2+0x14a>
 80044ca:	a13f      	add	r1, pc, #252	; (adr r1, 80045c8 <__ieee754_atan2+0x188>)
 80044cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044d0:	e7d7      	b.n	8004482 <__ieee754_atan2+0x42>
 80044d2:	4572      	cmp	r2, lr
 80044d4:	d10f      	bne.n	80044f6 <__ieee754_atan2+0xb6>
 80044d6:	4293      	cmp	r3, r2
 80044d8:	f104 34ff 	add.w	r4, r4, #4294967295
 80044dc:	d107      	bne.n	80044ee <__ieee754_atan2+0xae>
 80044de:	2c02      	cmp	r4, #2
 80044e0:	d84c      	bhi.n	800457c <__ieee754_atan2+0x13c>
 80044e2:	4b35      	ldr	r3, [pc, #212]	; (80045b8 <__ieee754_atan2+0x178>)
 80044e4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80044e8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80044ec:	e7c9      	b.n	8004482 <__ieee754_atan2+0x42>
 80044ee:	2c02      	cmp	r4, #2
 80044f0:	d848      	bhi.n	8004584 <__ieee754_atan2+0x144>
 80044f2:	4b32      	ldr	r3, [pc, #200]	; (80045bc <__ieee754_atan2+0x17c>)
 80044f4:	e7f6      	b.n	80044e4 <__ieee754_atan2+0xa4>
 80044f6:	4573      	cmp	r3, lr
 80044f8:	d0e4      	beq.n	80044c4 <__ieee754_atan2+0x84>
 80044fa:	1a9b      	subs	r3, r3, r2
 80044fc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8004500:	ea4f 5223 	mov.w	r2, r3, asr #20
 8004504:	da1e      	bge.n	8004544 <__ieee754_atan2+0x104>
 8004506:	2f00      	cmp	r7, #0
 8004508:	da01      	bge.n	800450e <__ieee754_atan2+0xce>
 800450a:	323c      	adds	r2, #60	; 0x3c
 800450c:	db1e      	blt.n	800454c <__ieee754_atan2+0x10c>
 800450e:	4632      	mov	r2, r6
 8004510:	463b      	mov	r3, r7
 8004512:	f7fc f947 	bl	80007a4 <__aeabi_ddiv>
 8004516:	ec41 0b10 	vmov	d0, r0, r1
 800451a:	f7ff ff59 	bl	80043d0 <fabs>
 800451e:	f7ff fdb7 	bl	8004090 <atan>
 8004522:	ec51 0b10 	vmov	r0, r1, d0
 8004526:	2c01      	cmp	r4, #1
 8004528:	d013      	beq.n	8004552 <__ieee754_atan2+0x112>
 800452a:	2c02      	cmp	r4, #2
 800452c:	d015      	beq.n	800455a <__ieee754_atan2+0x11a>
 800452e:	2c00      	cmp	r4, #0
 8004530:	d0a7      	beq.n	8004482 <__ieee754_atan2+0x42>
 8004532:	a319      	add	r3, pc, #100	; (adr r3, 8004598 <__ieee754_atan2+0x158>)
 8004534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004538:	f7fb fe52 	bl	80001e0 <__aeabi_dsub>
 800453c:	a318      	add	r3, pc, #96	; (adr r3, 80045a0 <__ieee754_atan2+0x160>)
 800453e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004542:	e014      	b.n	800456e <__ieee754_atan2+0x12e>
 8004544:	a118      	add	r1, pc, #96	; (adr r1, 80045a8 <__ieee754_atan2+0x168>)
 8004546:	e9d1 0100 	ldrd	r0, r1, [r1]
 800454a:	e7ec      	b.n	8004526 <__ieee754_atan2+0xe6>
 800454c:	2000      	movs	r0, #0
 800454e:	2100      	movs	r1, #0
 8004550:	e7e9      	b.n	8004526 <__ieee754_atan2+0xe6>
 8004552:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004556:	4619      	mov	r1, r3
 8004558:	e793      	b.n	8004482 <__ieee754_atan2+0x42>
 800455a:	a30f      	add	r3, pc, #60	; (adr r3, 8004598 <__ieee754_atan2+0x158>)
 800455c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004560:	f7fb fe3e 	bl	80001e0 <__aeabi_dsub>
 8004564:	4602      	mov	r2, r0
 8004566:	460b      	mov	r3, r1
 8004568:	a10d      	add	r1, pc, #52	; (adr r1, 80045a0 <__ieee754_atan2+0x160>)
 800456a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800456e:	f7fb fe37 	bl	80001e0 <__aeabi_dsub>
 8004572:	e786      	b.n	8004482 <__ieee754_atan2+0x42>
 8004574:	a10a      	add	r1, pc, #40	; (adr r1, 80045a0 <__ieee754_atan2+0x160>)
 8004576:	e9d1 0100 	ldrd	r0, r1, [r1]
 800457a:	e782      	b.n	8004482 <__ieee754_atan2+0x42>
 800457c:	a10c      	add	r1, pc, #48	; (adr r1, 80045b0 <__ieee754_atan2+0x170>)
 800457e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004582:	e77e      	b.n	8004482 <__ieee754_atan2+0x42>
 8004584:	2000      	movs	r0, #0
 8004586:	2100      	movs	r1, #0
 8004588:	e77b      	b.n	8004482 <__ieee754_atan2+0x42>
 800458a:	a107      	add	r1, pc, #28	; (adr r1, 80045a8 <__ieee754_atan2+0x168>)
 800458c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004590:	e777      	b.n	8004482 <__ieee754_atan2+0x42>
 8004592:	bf00      	nop
 8004594:	f3af 8000 	nop.w
 8004598:	33145c07 	.word	0x33145c07
 800459c:	3ca1a626 	.word	0x3ca1a626
 80045a0:	54442d18 	.word	0x54442d18
 80045a4:	400921fb 	.word	0x400921fb
 80045a8:	54442d18 	.word	0x54442d18
 80045ac:	3ff921fb 	.word	0x3ff921fb
 80045b0:	54442d18 	.word	0x54442d18
 80045b4:	3fe921fb 	.word	0x3fe921fb
 80045b8:	08004810 	.word	0x08004810
 80045bc:	08004828 	.word	0x08004828
 80045c0:	54442d18 	.word	0x54442d18
 80045c4:	c00921fb 	.word	0xc00921fb
 80045c8:	54442d18 	.word	0x54442d18
 80045cc:	bff921fb 	.word	0xbff921fb
 80045d0:	7ff00000 	.word	0x7ff00000

080045d4 <__ieee754_sqrt>:
 80045d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045d8:	ec55 4b10 	vmov	r4, r5, d0
 80045dc:	4e55      	ldr	r6, [pc, #340]	; (8004734 <__ieee754_sqrt+0x160>)
 80045de:	43ae      	bics	r6, r5
 80045e0:	ee10 0a10 	vmov	r0, s0
 80045e4:	ee10 3a10 	vmov	r3, s0
 80045e8:	462a      	mov	r2, r5
 80045ea:	4629      	mov	r1, r5
 80045ec:	d110      	bne.n	8004610 <__ieee754_sqrt+0x3c>
 80045ee:	ee10 2a10 	vmov	r2, s0
 80045f2:	462b      	mov	r3, r5
 80045f4:	f7fb ffac 	bl	8000550 <__aeabi_dmul>
 80045f8:	4602      	mov	r2, r0
 80045fa:	460b      	mov	r3, r1
 80045fc:	4620      	mov	r0, r4
 80045fe:	4629      	mov	r1, r5
 8004600:	f7fb fdf0 	bl	80001e4 <__adddf3>
 8004604:	4604      	mov	r4, r0
 8004606:	460d      	mov	r5, r1
 8004608:	ec45 4b10 	vmov	d0, r4, r5
 800460c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004610:	2d00      	cmp	r5, #0
 8004612:	dc10      	bgt.n	8004636 <__ieee754_sqrt+0x62>
 8004614:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004618:	4330      	orrs	r0, r6
 800461a:	d0f5      	beq.n	8004608 <__ieee754_sqrt+0x34>
 800461c:	b15d      	cbz	r5, 8004636 <__ieee754_sqrt+0x62>
 800461e:	ee10 2a10 	vmov	r2, s0
 8004622:	462b      	mov	r3, r5
 8004624:	ee10 0a10 	vmov	r0, s0
 8004628:	f7fb fdda 	bl	80001e0 <__aeabi_dsub>
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	f7fc f8b8 	bl	80007a4 <__aeabi_ddiv>
 8004634:	e7e6      	b.n	8004604 <__ieee754_sqrt+0x30>
 8004636:	1512      	asrs	r2, r2, #20
 8004638:	d074      	beq.n	8004724 <__ieee754_sqrt+0x150>
 800463a:	07d4      	lsls	r4, r2, #31
 800463c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8004640:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8004644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004648:	bf5e      	ittt	pl
 800464a:	0fda      	lsrpl	r2, r3, #31
 800464c:	005b      	lslpl	r3, r3, #1
 800464e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8004652:	2400      	movs	r4, #0
 8004654:	0fda      	lsrs	r2, r3, #31
 8004656:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800465a:	107f      	asrs	r7, r7, #1
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	2516      	movs	r5, #22
 8004660:	4620      	mov	r0, r4
 8004662:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004666:	1886      	adds	r6, r0, r2
 8004668:	428e      	cmp	r6, r1
 800466a:	bfde      	ittt	le
 800466c:	1b89      	suble	r1, r1, r6
 800466e:	18b0      	addle	r0, r6, r2
 8004670:	18a4      	addle	r4, r4, r2
 8004672:	0049      	lsls	r1, r1, #1
 8004674:	3d01      	subs	r5, #1
 8004676:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800467a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800467e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004682:	d1f0      	bne.n	8004666 <__ieee754_sqrt+0x92>
 8004684:	462a      	mov	r2, r5
 8004686:	f04f 0e20 	mov.w	lr, #32
 800468a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800468e:	4281      	cmp	r1, r0
 8004690:	eb06 0c05 	add.w	ip, r6, r5
 8004694:	dc02      	bgt.n	800469c <__ieee754_sqrt+0xc8>
 8004696:	d113      	bne.n	80046c0 <__ieee754_sqrt+0xec>
 8004698:	459c      	cmp	ip, r3
 800469a:	d811      	bhi.n	80046c0 <__ieee754_sqrt+0xec>
 800469c:	f1bc 0f00 	cmp.w	ip, #0
 80046a0:	eb0c 0506 	add.w	r5, ip, r6
 80046a4:	da43      	bge.n	800472e <__ieee754_sqrt+0x15a>
 80046a6:	2d00      	cmp	r5, #0
 80046a8:	db41      	blt.n	800472e <__ieee754_sqrt+0x15a>
 80046aa:	f100 0801 	add.w	r8, r0, #1
 80046ae:	1a09      	subs	r1, r1, r0
 80046b0:	459c      	cmp	ip, r3
 80046b2:	bf88      	it	hi
 80046b4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80046b8:	eba3 030c 	sub.w	r3, r3, ip
 80046bc:	4432      	add	r2, r6
 80046be:	4640      	mov	r0, r8
 80046c0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80046c4:	f1be 0e01 	subs.w	lr, lr, #1
 80046c8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80046cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80046d0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80046d4:	d1db      	bne.n	800468e <__ieee754_sqrt+0xba>
 80046d6:	430b      	orrs	r3, r1
 80046d8:	d006      	beq.n	80046e8 <__ieee754_sqrt+0x114>
 80046da:	1c50      	adds	r0, r2, #1
 80046dc:	bf13      	iteet	ne
 80046de:	3201      	addne	r2, #1
 80046e0:	3401      	addeq	r4, #1
 80046e2:	4672      	moveq	r2, lr
 80046e4:	f022 0201 	bicne.w	r2, r2, #1
 80046e8:	1063      	asrs	r3, r4, #1
 80046ea:	0852      	lsrs	r2, r2, #1
 80046ec:	07e1      	lsls	r1, r4, #31
 80046ee:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80046f2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80046f6:	bf48      	it	mi
 80046f8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80046fc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8004700:	4614      	mov	r4, r2
 8004702:	e781      	b.n	8004608 <__ieee754_sqrt+0x34>
 8004704:	0ad9      	lsrs	r1, r3, #11
 8004706:	3815      	subs	r0, #21
 8004708:	055b      	lsls	r3, r3, #21
 800470a:	2900      	cmp	r1, #0
 800470c:	d0fa      	beq.n	8004704 <__ieee754_sqrt+0x130>
 800470e:	02cd      	lsls	r5, r1, #11
 8004710:	d50a      	bpl.n	8004728 <__ieee754_sqrt+0x154>
 8004712:	f1c2 0420 	rsb	r4, r2, #32
 8004716:	fa23 f404 	lsr.w	r4, r3, r4
 800471a:	1e55      	subs	r5, r2, #1
 800471c:	4093      	lsls	r3, r2
 800471e:	4321      	orrs	r1, r4
 8004720:	1b42      	subs	r2, r0, r5
 8004722:	e78a      	b.n	800463a <__ieee754_sqrt+0x66>
 8004724:	4610      	mov	r0, r2
 8004726:	e7f0      	b.n	800470a <__ieee754_sqrt+0x136>
 8004728:	0049      	lsls	r1, r1, #1
 800472a:	3201      	adds	r2, #1
 800472c:	e7ef      	b.n	800470e <__ieee754_sqrt+0x13a>
 800472e:	4680      	mov	r8, r0
 8004730:	e7bd      	b.n	80046ae <__ieee754_sqrt+0xda>
 8004732:	bf00      	nop
 8004734:	7ff00000 	.word	0x7ff00000

08004738 <__errno>:
 8004738:	4b01      	ldr	r3, [pc, #4]	; (8004740 <__errno+0x8>)
 800473a:	6818      	ldr	r0, [r3, #0]
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	2000009c 	.word	0x2000009c

08004744 <__libc_init_array>:
 8004744:	b570      	push	{r4, r5, r6, lr}
 8004746:	4d0d      	ldr	r5, [pc, #52]	; (800477c <__libc_init_array+0x38>)
 8004748:	4c0d      	ldr	r4, [pc, #52]	; (8004780 <__libc_init_array+0x3c>)
 800474a:	1b64      	subs	r4, r4, r5
 800474c:	10a4      	asrs	r4, r4, #2
 800474e:	2600      	movs	r6, #0
 8004750:	42a6      	cmp	r6, r4
 8004752:	d109      	bne.n	8004768 <__libc_init_array+0x24>
 8004754:	4d0b      	ldr	r5, [pc, #44]	; (8004784 <__libc_init_array+0x40>)
 8004756:	4c0c      	ldr	r4, [pc, #48]	; (8004788 <__libc_init_array+0x44>)
 8004758:	f000 f820 	bl	800479c <_init>
 800475c:	1b64      	subs	r4, r4, r5
 800475e:	10a4      	asrs	r4, r4, #2
 8004760:	2600      	movs	r6, #0
 8004762:	42a6      	cmp	r6, r4
 8004764:	d105      	bne.n	8004772 <__libc_init_array+0x2e>
 8004766:	bd70      	pop	{r4, r5, r6, pc}
 8004768:	f855 3b04 	ldr.w	r3, [r5], #4
 800476c:	4798      	blx	r3
 800476e:	3601      	adds	r6, #1
 8004770:	e7ee      	b.n	8004750 <__libc_init_array+0xc>
 8004772:	f855 3b04 	ldr.w	r3, [r5], #4
 8004776:	4798      	blx	r3
 8004778:	3601      	adds	r6, #1
 800477a:	e7f2      	b.n	8004762 <__libc_init_array+0x1e>
 800477c:	08004848 	.word	0x08004848
 8004780:	08004848 	.word	0x08004848
 8004784:	08004848 	.word	0x08004848
 8004788:	0800484c 	.word	0x0800484c

0800478c <memset>:
 800478c:	4402      	add	r2, r0
 800478e:	4603      	mov	r3, r0
 8004790:	4293      	cmp	r3, r2
 8004792:	d100      	bne.n	8004796 <memset+0xa>
 8004794:	4770      	bx	lr
 8004796:	f803 1b01 	strb.w	r1, [r3], #1
 800479a:	e7f9      	b.n	8004790 <memset+0x4>

0800479c <_init>:
 800479c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479e:	bf00      	nop
 80047a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047a2:	bc08      	pop	{r3}
 80047a4:	469e      	mov	lr, r3
 80047a6:	4770      	bx	lr

080047a8 <_fini>:
 80047a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047aa:	bf00      	nop
 80047ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ae:	bc08      	pop	{r3}
 80047b0:	469e      	mov	lr, r3
 80047b2:	4770      	bx	lr
